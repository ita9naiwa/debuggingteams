[[building_an_awesome_team_culture]]
== Chapter 2. Building an Awesome Team Culture

팀 문화는 놀라울 만큼 다양하며 매우 폭넓은 가치와 우선순위를 반영합니다.
어떤 문화는 팀의 성공을 촉진하지만, 어떤 문화는 대규모의 실패를 부추기기도 합니다.
성공적인 팀을 이끄는 문화들 사이에서도, 어떤 문화는 믿을 수 없을 정도로 효율적이라
팀이 하려던 일에 대부분의 노력을 집중하게 만들고, 어떤 문화는 당면 과제에서 팀을 크게 산만하게
만들기도 합니다.
이 장에서는 성공에 기여하는 다양한 커뮤니케이션 기법에 강하게 초점을 맞춰 문화를 이야기합니다.
또한 이러한 기법들을 사람이 모인 팀이 어떤 제품이든 더 효율적으로 만들어내는 데 어떻게
사용할 수 있는지 살펴보겠습니다.

[[what_is_culture]]
=== 문화란 무엇인가?

‘문화’라는 말을 들으면 대개 오페라 같은 공연이나, 고등학교 생물 시간에 봤던 박테리아가 자라던 젤리 접시를 떠올리게 됩니다. 사실 엔지니어링 팀 문화는 박테리아 배양실험과 그리 다르지 않습니다.


[[image_no_caption-id009]]
image::images/dbtm_02in01.png[]

((("culture","sourdough bread analogy")))((("sourdough bread analogy")))

정말 맛있는 사워도우 빵을 먹어보고 굽는 사람을 일부러 찾아가 본 적이 있다면, 그 빵의 핵심 재료가 밀가루와 물을 먹고 사는 효모와 유산균이 들어 있는 ‘스타터’라는 사실을 알게 될 것입니다. 효모는 빵을 부풀게 하고, 박테리아는 그 놀라운 톡 쏘는 새콤한 풍미를 만듭니다. 하지만 모든 유산균이 똑같지는 않아서, 어떤 균주는 더 바람직한 맛을 내기도 합니다. 그래서 어느 제빵사가 정말 훌륭한 사워도우 풍미를 내는 스타터(즉, 박테리아/효모 혼합 배양)를 발견하면, 같은 배양을 유지·증식시키기 위해 밀가루와 물을 보충하며 정성껏 돌봅니다. 그런 다음 스타터를 조금씩 덜어 한 덩이의 빵 재료에 접종하고, __짜잔__, 훌륭한 사워도우 한 덩이가 나옵니다! 이는 스타터의 배양이 원하는 맛을 만들어낼 뿐 아니라, 반죽 재료나 제과점 공기 중에 있을 수 있는 다른 야생 효모나 박테리아의 균주들을 제압할 만큼 충분히 강하기 때문입니다.


[[image_no_caption-id010]]
image::images/dbtm_02in02.png[]

Your team's culture is much like a good loaf of sourdough: your
starter culture (your founders) inoculates your
dough (your newcomers) with the culture, and as the yeast and bacteria
(your team members) grow, out pops a great loaf of bread (your
team). If your starter culture is strong, it's more than capable of
overcoming any undesirable "wild strains" of culture that a newcomer
might bring with him.footnote:[Of course, a strong
culture always has the option of incorporating any desirable "wild
strains" that a newcomer brings in with her.] If your starter culture
is weak, your team is vulnerable to unknown culture strains that
newcomers might bring along. Unknown cultures bring with them
unpredictable results, so it's better to begin with a known starter
culture.

여러분의 팀 문화는 좋은 사워도우 한 덩이와도 같습니다. 스타터 배양(창업자와 초기 구성원)은 새 반죽(신규 입사자)을 문화로 ‘접종’하고, 효모와 박테리아(팀원)가 자라면서 훌륭한 빵(팀)이 나옵니다. 스타터 문화가 강하면, 신입이 가져올 수 있는 바람직하지 않은 ‘야생 균주’의 문화까지도 충분히 제압할 수 있습니다.footnote:[물론 강한 문화는 신입이 가져오는 바람직한 ‘야생 균주’를 받아들이는 선택지도 언제나 갖고 있습니다.] 반대로 스타터 문화가 약하면, 팀은 신입이 가져올지 모르는 미지의 문화 균주에 취약해집니다. 낯선 문화는 예측 불가능한 결과를 동반하므로, 알려진 스타터 문화로 시작하는 편이 더 낫습니다.

하지만 팀 문화는 팀원들이 일을 다루는 방식이나 코드를 작성하는 방식, 서로를 대하는 태도만을 의미하지 않습니다. 우리가 몸담았거나 관찰했던 모든 엔지니어링 팀마다 고유한, 공유된 경험·가치·목표의 집합이 곧 문화입니다. 팀이나 회사의 창립 구성원이 팀 문화의 큰 부분을 규정하지만, 문화는 팀이 존속하는 동안 계속 변하고 발전합니다.

팀 문화를 이루는 요소는 실로 제각각입니다. 어떤 것은 일하는 __과정__과 직접적으로 관련이 있습니다. 소프트웨어 개발의 경우 코드 리뷰와 테스트 주도 개발을 도입하고, 산더미 같은 코드를 양산하기 전에 좋은 디자인 문서를 중시할 수 있습니다. 어떤 요소는 더 사회적입니다. 예를 들어 매주 목요일마다 특정 식당에 점심을 먹으러 가거나, 금요일마다 단골 바에 가서 한잔하는 것처럼요. 외부인의 눈에는 어떤 것들은 완전히 엉뚱하거나 우스꽝스러워 보일 수도 있습니다. 구글 피츠버그 엔지니어링 오피스는 한때 화물열차 선로 바로 옆에 있었는데, 기차가 지나갈 때마다(정말 엄청 시끄럽습니다) 모두가 벌떡 일어나 서로에게 너프 다트를 쏘곤 했습니다.footnote:[저희 중 한 명인 Fitz가 구글 피츠버그 오피스를 처음 방문했을 때 이 장면을 보고 __엄청__ 놀랐습니다.] 이 모든 것이 팀 문화를 구성하며, 팀의 생산성과 훌륭한 인재를 끌어들이고 유지하는 능력에 영향을 미칩니다.

(((range="endofrange", startref="ixch02asciidoc2")))

오늘날 엄청난 성공을 거둔 소프트웨어 회사들—구글, 애플, 마이크로소프트, 오라클—을 보면, 각 회사가 매우 다른 문화를 가지고 있음을 알 수 있습니다. 그 문화는 창업자와 초기 직원들이 세운 문화에 뿌리를 두고 있습니다. 회사들이 성장하고 성숙해 오면서 문화도 진화하고 변해 왔지만, 제품을 개발하는 방식, 직원을 대하는 방식, 다른 회사와 경쟁하는 방식 등 거의 모든 측면에 스며드는 고유한 정체성은 여전히 유지되고 있습니다.(((range="endofrange", startref="ixch02asciidoc2")))

[[why_should_you_care]]
=== 그게 왜 중요한가?

((("team culture","importance of", id="ixch02asciidoc3", range="startofrange")))

// Beyond that 부분이 개인 -> 팀으로 문화에 대한 관점이 확장된다고 생각해 더 나아가로 수정했습니다.
// newcomer이 신입보다 신규 입사한 팀원이 왔을 경우라고 생각해 새로운 팀원으로 수정했습니다.
요약하면, 여러분은 문화에 신경 써야 합니다. 문화에 공을 들여 만들고 유지하지 않으면, 언젠가 강한 개성을 지닌 사람들이 들어와 팀 안에 __그들만의__ 문화를 키워 버릴 것이기 때문입니다. 이렇게 길러진  ((("cultivating
  culture")))문화가 운 좋게도 생산적이고 건강해서 훌륭한 코드를 쏟아내는 경우도 있겠지만, 대체로 그렇지 않습니다. 그러면 제품을 설계하고 만드는 데 쓰이던 에너지가 갑자기 논쟁과 내분으로 소모되기 시작합니다. 더 나아가 팀이 가치 있게 여기고 지키고자 하는 문화가 있어야 합니다. 팀이 문화를 소중히 여기지 않으면 강한 팀 정체성과 공동의 자부심을 쌓기 어렵고, 새로운 팀원이 들어와 문화를 엉망으로 바꾸어 버리기 아주 쉬워집니다.

((("leaders","and team culture")))((("team culture","and leaders")))
대부분의 팀 __구성원__이 저지르는 첫 번째 실수는 팀의 문화는 팀 __리더__가 관리한다고 가정하는 것입니다. 사실과 정반대입니다. 창업자나 리더들이 보통 문화의 건강을 돌보긴 하지만 팀의 모든 구성원이 문화를 함께 만들고, 유지하고, 지켜낼 책임을 나눠 갖습니다. 누군가 팀에 합류하면, 그 사람은 리더에게서만 문화를 배우는 것이 아니라 같이 일하는 모든 팀원에게서 문화를 받아들입니다. 예를 들어, 새로운 팀원의 작업을 꼼꼼히 리뷰하며 왜 우리 팀이 그렇게 하는지 설명해 주면, 새로운 팀원은 팀이 제품에서 무엇을 가치 있게 여기는지 빠르게 깨닫습니다. 또한 팀의 나머지 구성원들이 어떻게 일하고 상호작용하며 갈등을 다루는지를 관찰하면서 문화 전반을 배우게 됩니다.

((("strong culture")))
“강한 문화”란, 문화를 더 좋게 만드는 변화에는 열려 있으면서도, 해를 끼치는 급진적 변화에는 단호히 저항하는 문화를 말합니다. 가장 성공적인 팀 문화는 팀의 노력을 위대한 소프트웨어를 출시하는 데 집중시킵니다. 팀의 주된 초점이 소프트웨어를 만드는 일이 아니라면(예: 파티, 회의 참석, 자기 과시 경쟁), 팀 결속은 강해질지 몰라도 소프트웨어는 거의 만들어지지 않을 것입니다. 코드 작성과 제품 출시가 가장 즐겁다면, 그 가치를 중시하는 팀을 찾고 그런 환경을 유지하기 위해 노력하는 것이 분명 여러분에게 이롭습니다. 강하고 생산적인 문화 없이도 훌륭한 무언가를 만들 수는 있겠지만, 그 경우 훨씬 더 많은 시간과 에너지가 듭니다. 강한 문화는 집중, 효율, 그리고 힘을 줍니다. 이것이 팀을 더 행복하게 만듭니다.

팀 문화의 흥미로운 점은 한 번 뚜렷하게 정립되면,
그 문화에 어울리는 사람만 남게 되는 특성이 있습니다. 오픈 소스 세계에서 HRT를 기반으로 깔끔하고 우아하며 유지보수하기 쉬운 코드를 지향하는 프로젝트는—놀랍게도—서로를 존중하고 신뢰하며 그런 코드를 작성하고자 하는 엔지니어를 끌어들입니다. 반대로 공격성, 괴롭힘, 인신공격이 만연한 문화 위에 팀이 세워졌다면, 그런 사람들만 더 모이게 될 것입니다.

((("self-selecting cultures")))
우리는 아파치 소프트웨어 재단에서 자기 선택적(self-selecting) 문화가 작동하는 모습을 여러 번 보았습니다. ASF는 커뮤니티 기반의 합의 모델로 운영되는 소프트웨어 개발 팀들의 모음입니다. 새로운 기여자가 메일링 리스트에 들어와 무지나 악의로 팀 문화에 어긋나는 행동을 보일 때가 종종 있습니다. 커뮤니티 구성원들은 보통 그 새로운 기여자을 교육하려고 시도합니다(가끔은 부드럽게, 가끔은 음… 그다지 부드럽지 않게). 그리고 그 새로운 기여자가 ASF 팀의 방식에 관심이 없다면, 보통은 더 잘 맞는 프로젝트를 찾으러 떠납니다.

In the corporate world, teams self-select through the hiring process,
whether implicitly in the skills and strengths that are valued in
potential candidates, or explicitly by considering culture fit as part
of the hiring process. Google takes the explicit approach in its
hiring process as it looks specifically for culture fit when
interviewing candidates: if Google interviews someone who in all
respects looks like an outstanding engineer, but is incapable of
working with a team of people or
requires a very structured environment, the interviewers will raise a
red flag in their feedback.

기업 세계에서도 팀은 채용 과정을 통해 자기 선택을 이룹니다. 이는 후보자에게서 중시하는 기술과 강점이라는 암묵적 기준일 수도 있고, 채용 과정에서 문화 적합성을 명시적으로 평가하는 절차일 수도 있습니다. 구글은 명시적 접근을 택합니다. 면접에서 문화 적합성을 구체적으로 확인합니다. 모든 면에서 뛰어난 엔지니어처럼 보여도, 사람들과 팀으로 일하지 못하거나 지나치게 구조화된 환경만을 요구한다면, 면접관들은 피드백에 경고(red flag)를 남깁니다.

채용에서 문화 적합성을 살피지 않고 맞지 않는 사람을 뽑는다면, 그 사람이 팀에 맞도록 적응시키거나 팀을 떠나게 만드는 데 엄청난 에너지를 쓰게 됩니다. 결과가 어떻든 비용이 매우 크기 때문에, 새 팀원이 기존 팀과 잘 맞을지를 미리 확인하는 것이 확실히 그만한 가치가 있습니다.

[[note-1]]
.Interviewing for culture
[NOTE]
====

((("interviews"))) 새 팀원이 문화적으로 맞는지 확실히 하려면, 그 자체를 위한 인터뷰를 해야 합니다. 많은 회사(구글 같은)는 면접에서 문화 적합성을 후보자 평가 기준 중 하나로 둡니다. 어떤 회사는 채용 실수를 피하려고 한 발 더 나아갑니다. 기술 면접 __이전에__ 문화 적합성만 따로 보는 면접을 진행해, 기술적으로는 맞아도 문화적으로 맞지 않는 사람은 아예 고려하지 않으려는 것입니다. 이런 과정에의 개입은 강한 문화를 만들고 지키는 데 결정적입니다. 우연히 이루어지지 않습니다. 보통 회사의 창립자와 초기 직원들이 의식적으로 설계합니다.(((range="endofrange", startref="ixch02asciidoc3")))ㄴ

====

[[culture_and_people]]
=== Culture and People

((("people","culture and", id="ixch02asciidoc4", range="startofrange")))((("team culture","and people", id="ixch02asciidoc5", range="startofrange")))
Creative work like writing software is different from simply knocking out widgets on an
assembly line. Some types of work can be done with a few days of
training and some basic tools, and if your worker quits and leaves (or
doesn't work out), you just drop another worker in and on you go. In
the assembly line environment, employees are accomplishing simple
tasks, often by rote, with little creative-thinking or problem-solving
skills required. In the software world, a great deal of creative
thinking is required of engineers working on a
product,footnote:[Some people think they can hire a
whiz-bang architect and a bunch of mediocre programmers and create a
good product. We think you can do that, but it's considerably less
exciting and fun than working with a team of great people who inspire, challenge, and
teach you.] and if you want a great product, you need great
engineers. If you want great engineers to do great work (and to stick
around), you need to create a culture for them that allows them to
safely share ideas and have a voice in the decision-making process.

소프트웨어를 쓰는 것 같은 창의적 일은 단순히 조립 라인에서 부품을 찍어내는 일과 다릅니다.
어떤 일은 며칠 교육과 기본 도구만으로도 해낼 수 있고, 사람이 그만두거나 맞지 않으면 다른 사람을 투입해 이어갈 수도 있습니다.
조립 라인 환경에서는 창의적 사고나 문제 해결 능력이 거의 요구되지 않는 단순 작업을 종종 반복합니다.
반면 소프트웨어 세계에서는 제품을 만드는 엔지니어에게 많은 창의적 사고가 요구됩니다.footnote:[‘초특급 아키텍트’와 평범한 프로그래머 몇 명만 뽑아도 좋은 제품을 만들 수 있다고 생각하는 사람들이 있습니다.
할 수는 있겠지만, 우리 생각에 그것은 훌륭한 사람들과 함께 서로 영감을 주고 도전하고 배울 수 있는 팀과 일하는 것에 비해 훨씬 덜 흥미롭고 재미없습니다.]
훌륭한 제품을 원한다면, 훌륭한 엔지니어가 필요합니다. 훌륭한 엔지니어가 좋은 일을 하고 오래 함께하도록 하려면, 아이디어를 안전하게 공유하고 의사결정 과정에서 목소리를 낼 수 있는 문화를 만들어야 합니다.

If you want to get excellent engineers to work on your team, you need
to start by hiring, well, some great engineers! That may sound weird,
but the fact of the matter is that most great engineers want to be on
teams with __other__ great engineers. Many great engineers we know
gravitate toward teams where they can learn from giants of the
industry.footnote:[Great engineers also demand great
team leaders, because crappy leaders not only tend to be too insecure
to deal with great engineers, but also tend to boss people around.] So
how do you attract these engineers in the first place?

뛰어난 엔지니어들을 팀으로 데려오고 싶다면, 우선은… 네, 뛰어난 엔지니어를 채용하는 것부터 시작해야 합니다!
다소 이상하게 들릴지 몰라도 사실입니다. 대부분의 훌륭한 엔지니어는 __다른__ 훌륭한 엔지니어들과 함께하는 팀을 원합니다.
우리가 아는 많은 뛰어난 엔지니어는 업계의 거인들에게서 배울 수 있는 팀으로 모여듭니다.footnote:[훌륭한 엔지니어는 훌륭한 리더도 요구합니다. 형편없는 리더는 훌륭한 엔지니어를 감당할 자신이 없고, 사람들을 좌지우지하려 드는 경향이 있기 때문입니다.]
그럼 애초에 이들을 어떻게 끌어들일 수 있을까요?

For starters, they're going to want to be able to not only contribute
to the development of
your product, but also participate in the product's decision-making
process, and that usually means some level of consensus-driven
management. In the case of top-down management, the alpha engineer is
the team lead and lesser engineers are hired as team members. This is
because subservient team members cost less and are easier to push
around. And you're going to have a hard time finding great engineers
to be on this team because, after all, what really great engineer
wants to __ride__ the bus when she can __drive__ the bus at another
company? But in the case of consensus-driven management, the entire
team participates in the decision-making process.

먼저, 이들은 단지 제품 개발에 기여하는 것을 넘어, 제품에 대한 의사결정 과정에도 참여하길 원합니다.
이는 대개 일정 수준의 합의 주도형 경영을 의미합니다.
반면 상명하복식(top-down) 관리에서는 알파 엔지니어가 팀 리드가 되고, 그보다 낮은 엔지니어들이 팀원으로 채용됩니다.
순응적인 팀원일수록 비용이 적게 들고 다루기 쉽기 때문입니다.
하지만 이렇게 하면 훌륭한 엔지니어를 팀으로 데려오기 어렵습니다.
다른 회사에서는 __운전석__에 앉을 수 있는데 굳이 여기서 __승객__이 되려 할 훌륭한 엔지니어가 누가 있겠습니까?
반면 합의 주도형 경영에서는 팀 전체가 의사결정 과정에 참여합니다.

((("consensus-based team")))Many people hear "consensus-based team" and immediately think of a
bunch of hippies singing "Kumbaya" around a campfire and never making
a decision or getting anything done, but that stereotype is
symptomatic of a dysfunctional team much more than a consensus-based
team. What we mean by "consensus" is that everyone has a strong sense
of ownership and responsibility for the product's success and that the
leaders really listen to the team (with an emphasis on the "respect"
component of HRT). This may mean there are times when extended
discussion and reflection is what the product needs to succeed, and
there are other times when the team
agrees they need to move quickly. In the latter case, team members may
decide to entrust a great deal of the nitty-gritty day-to-day
decision making to one or more team
leads.footnote:[When consensus can't be reached, some
teams have their leads decide, while other teams put it to a vote. The
process your team uses is less important than having a process and
sticking with it when there's conflict.] In order for this to happen,
the team as a whole needs to agree on the general mission of the team,
and believe it or not, the key to that is the development of a team
mission statement (more on that later in this chapter).

“합의 기반 팀”이라고 하면, 모닥불 옆에서 ‘쿰바야’를 부르며 결정 하나 못 내리고 아무것도 못 하는 히피 무리를 떠올리는 사람이 많습니다.
그러나 그런 고정관념은 합의 기반 팀이 아니라 기능장애 팀의 징후에 가깝습니다.
우리가 말하는 “합의”란 모든 구성원이 제품의 성공에 대해 강한 소유감과 책임감을 갖고, 리더가 팀의 목소리를 진지하게 귀 기울여 듣는 것(HRT의 “존중” 요소를 강조)입니다.
제품이 성공하려면 때로는 충분한 토론과 숙고가 필요할 때가 있고, 다른 때에는 빠르게 움직여야 한다고 팀이 합의할 때도 있습니다.
후자의 경우 팀원들은 일상적인 세부 의사결정의 많은 부분을 한 명 또는 여러 명의 팀 리드에게 위임하기로 결정할 수 있습니다.footnote:[합의를 이루지 못하면 어떤 팀은 리드가 결정하도록 하고, 어떤 팀은 표결에 부칩니다.
팀이 어떤 과정을 쓰느냐보다 중요한 것은, 갈등이 있을 때 그 과정을 일관되게 지키는 것입니다.] 이를 위해서는 팀 전체가 팀의 전반적 사명에 동의해야 하며, 믿기 어렵겠지만 그 핵심은 팀의 미션 문서(이 장 뒤에서 더 다룹니다)를 만드는 것입니다.

((("self-selecting cultures")))Just as important as your team's decision-making process is the manner in which team members
treat one another, because this is more self-selecting than anything
else. If your team has a culture of chest thumping and yelling and
screaming at one another, the only people you'll attract (and retain)
are aggressive types who feel right at home in this
environment composed of strong pass:[<span class="keep-together">individual</span>] egos (in fact, most of the
women we know find this kind of environment especially
off-putting). If you create a culture of HRT where team members treat
one another kindly and take the effort to give constructive criticism, you'll not only attract a much
larger set of people, but you'll also spend a great deal more of your
energy writing software. Having a strong team egofootnote:[In
other words, team pride.] is good; a team totally eclipsed by
__individual__ egos is a recipe for disaster. We'll discuss how to
prevent this sort of situation in <<dealing_with_poisonous_people>>.

팀의 의사결정 과정만큼이나 중요한 것은 팀원들이 서로를 대하는 방식입니다.
이는 무엇보다도 자기 선택적이기 때문입니다.
가슴을 치며 고함치고 서로에게 소리를 지르는 문화에서는, 강한 __개인__의 자아가 지배적인 환경에 익숙한 공격적인 유형의 사람들만 끌리고(그리고 남게) 됩니다(실제로 우리가 아는 많은 여성들은 이런 환경을 특히 불쾌해합니다).
반대로 HRT에 기반한, 서로를 친절히 대하고 건설적 피드백을 주기 위해 노력하는 문화를 만들면, 훨씬 더 넓은 사람들을 끌어들일 수 있고, 소프트웨어를 쓰는 데 훨씬 더 많은 에너지를 쏟게 됩니다.
강한 팀 자아footnote:[즉, 팀의 자부심]는 좋습니다. 그러나 __개인__의 자아가 팀 전체를 가리는 상황은 재앙의 처방전입니다.
이런 상황을 어떻게 막을지는 <<dealing_with_poisonous_people>>에서 다루겠습니다.

((("constructive criticism")))((("criticism","and team culture")))Constructive criticism is essential
to the growth and development of any person or team, but many people
will go to great lengths to avoid soliciting criticism.  In some cases
this is due to insecurity, but in most cases that we've seen it is
because a person thinks that they are required to take action on any
criticism received, even if they disagree with it.  The best part
about getting good constructive criticism is that you can pick and
choose which pieces you want to act on. Let's say, for example, that
you're getting ready for an important job interview and put on your
favorite suit. You approach a trusted friend and ask how you look. If
they say, "You've got spinach in your teeth, and I really hate your
suit" you can take a quick floss break, but you don't __have__ to
change clothes as well. Criticism is a gift that you can either accept
or reject.

건설적 비판은 개인이나 팀의 성장과 발전에 필수적입니다.
하지만 많은 사람들은 비판을 구하는 일을 어떻게든 피하려 듭니다.
어떤 경우엔 불안감 때문이지만, 우리가 보기엔 대체로 받은 비판에 동의하지 않더라도 반드시 행동으로 옮겨야 한다고 생각하기 때문입니다.
건설적 비판의 가장 좋은 점은, 어떤 부분을 행동으로 옮길지 여러분이 선택할 수 있다는 것입니다.
예를 들어 중요한 면접을 앞두고 가장 좋아하는 정장을 입었다고 합시다.
신뢰하는 친구에게 어떻게 보이는지 묻습니다. “이 사이에 시금치 끼었고, 솔직히 옷은 별로야”라고 하면, 바로 치실로 해결하면 됩니다.
옷까지 __바꿀 필요는 없습니다__. 비판은 여러분이 받아들일 수도, 거절할 수도 있는 선물입니다.

If you're interested in improving your work or fixing your own
personal bugs, these very friends and colleagues are the ones that can
make you aware of things you do that might be hindering your
effectiveness. Unless you have a truly remarkable level of
self-awareness or introspection, without criticism, you'll just go on
making the same mistakes no one wants to tell you about. For example,
in the process of going to press with this book, we've had no fewer
than a dozen people look at it and give us constructive criticism on our writing, and most of it was
incredibly detailed and completely invaluable. Regardless of whether
you think the book is good or bad, it would have been __considerably
worse__ if we had ignored this valuable feedback or been afraid to ask
for it.

여러분의 일을 더 잘하고 개인적인 결함을 고치는 데 관심이 있다면, 바로 그런 친구와 동료들이 여러분의 효율을 떨어뜨리는 습관을 자각하게 만들어 줄 사람들입니다.
아주 놀라운 수준의 자기 인식이나 성찰 능력이 있지 않은 한, 비판이 없으면 아무도 말해 주지 않는 같은 실수를 계속 반복하게 됩니다.
예컨대 이 책을 출간하는 과정에서 우리는 12명 넘는 사람들이 우리 글을 읽고 건설적 비판을 해주었고, 그 대부분이 믿을 수 없을 만큼 세밀하고 정말 귀중했습니다.
여러분이 이 책을 좋다고 보든 나쁘다고 보든, 우리가 이 귀중한 피드백을 무시했거나 묻기를 두려워했다면 책은 __훨씬 더 형편없어졌을__ 것입니다.

[role="pagebreak-before"]
It requires a certain amount of self-confidence
to take any kind of criticism, and we think constructive criticism is
the easiest kind to receive. On the downside, it's a lot harder to
give someone constructive criticism than to simply lambast her or
ridicule something she did. Of course, we realize it's incredibly
difficult to solicit and then receive constructive criticism from most
people—they assume that when you ask them to criticize your work,
you're only looking for compliments and assurance. If you can find
friends or colleagues who will constructively criticize your work when
you ask them, hang on to these people because they're worth their
weight in unobtainium.

어떤 비판이든 받아들이려면 일정 수준의 자신감이 필요하고, 그중에서도 건설적 비판이 가장 받아들이기 쉽다고 생각합니다.
반면 남에게 건설적 비판을 해주는 일은, 그저 몰아붙이거나 조롱하는 것보다 훨씬 어렵습니다.
대부분의 사람에게 건설적 비판을 부탁하고 실제로 받는 일은 매우 어렵다는 것도 잘 알고 있습니다.
많은 사람들이 여러분이 비판을 요청하면 사실 칭찬과 안심만을 원한다고 생각하기 때문입니다.
여러분이 요청할 때 건설적으로 비판해 줄 수 있는 친구나 동료를 찾았다면, 그들은 ‘언옵테이니엄(unobtainium)’만큼 귀한 사람들이니 꼭 붙잡으세요.

((("aggressive people")))Aggressive people can (usually) be productive
in a quieter environment, but quieter, more introverted people rarely
excel (or enjoy working) in an aggressive environment—it's not only
harder to hear their voices over the noise, but it also tends to
discourage them from being ((("Cain, Susan")))active
participants.footnote:[See Susan Cain's excellent TED Talk, http://www.youtube.com/watch?v=c0KYU2j0TM4["The Power of
Introverts"], or her book,
__Quiet: The Power of Introverts__ (Crown).] If you're looking for a
culture that allows the broadest range of people to work most
efficiently, you should build that culture on humility, respect, and
trust.

공격적인 사람은(보통) 더 조용한 환경에서도 생산적으로 일할 수 있습니다.
하지만 조용하고 내향적인 사람은 공격적인 환경에서 뛰어나기(혹은 즐겁게 일하기) 어렵습니다.
소음 속에서 그들의 목소리를 듣기 어려울 뿐 아니라, 적극적으로 참여하지 않게 만들기 때문입니다.footnote:[수잔 케인의 훌륭한 TED 강연 ‘The Power of Introverts’(http://www.youtube.com/watch?v=c0KYU2j0TM4) 또는 저서 __Quiet: The Power of Introverts__(Crown)을 참고하세요.]
가장 넓은 범위의 사람들이 가장 효율적으로 일할 수 있는 문화를 원한다면, 그 문화는 겸손, 존중, 신뢰 위에 세워져야 합니다.

((("calm cultures")))Calm, easygoing cultures built on respect are more vulnerable to
disruption by aggressive people than ((("aggressive cultures")))aggressive cultures are
vulnerable to disruption from more easygoing people. Easygoing
cultures need to be aware of this and not let the aggressive newcomer
take over, typically by refusing to engage this person in an
aggressive tone. In some cases, one or more of the more senior team
members may have to meet the aggressive newcomer head-on to prevent
her from harming an easygoing team culture. Again, we'll talk a lot more about how to deal
with these sorts of "poisonous people" in
<<dealing_with_poisonous_people>>.(((range="endofrange", startref="ixch02asciidoc5")))(((range="endofrange", startref="ixch02asciidoc4")))

존중을 바탕으로 한 차분하고 느긋한 문화는, 공격적인 문화가 느긋한 사람에게서 방해받는 것보다 공격적인 사람에게서 방해받기 더 쉽습니다.
느긋한 문화는 이를 인지하고, 보통은 공격적인 어조로 맞대응하지 않음으로써, 공격적인 신입이 주도권을 잡지 못하게 해야 합니다.
경우에 따라서는 더 선임인 팀원이 나서서 그 신입을 정면으로 상대해, 팀의 온화한 문화를 해치지 못하도록 막아야 할 수도 있습니다.
이런 “독이 되는 사람들”을 다루는 법은 <<dealing_with_poisonous_people>>에서 더 자세히 이야기하겠습니다.(((range="endofrange", startref="ixch02asciidoc5")))(((range="endofrange", startref="ixch02asciidoc4")))

[[communication_patterns_of_successful_cul]]
=== Communication Patterns of Successful Cultures

((("communication","in successful cultures", id="ixch02asciidoc6", range="startofrange")))((("team culture","communication patterns for", id="ixch02asciidoc7", range="startofrange")))Communication can often be a challenge when working with a team,
particularly for engineers, who would rather spend an afternoon with a
(predictable, logical) compiler than spend three minutes with a
(unpredictable, emotional) human being. In many cases, engineers see
communication work as an obstacle to be overcome on the road to
writing more code, but if your team isn't in agreement or is uninformed, there's no way to
know if you're writing the right code in the first place.

팀으로 일할 때 커뮤니케이션은 종종 어려운 과제가 됩니다.
특히 예측 가능하고 논리적인 컴파일러와 오후 내내 씨름하는 편이, 예측 불가능하고 감정적인 인간과 3분 대화하는 것보다 낫다고 느끼는 엔지니어에게는 더 그렇습니다.
많은 경우 엔지니어는 커뮤니케이션을 더 많은 코드를 쓰기 위해 넘어야 할 장애물로 봅니다.
하지만 팀이 합의하지 않았거나 정보가 공유되지 않았다면, 애초에 여러분이 올바른 코드를 쓰고 있는지조차 알 수 없습니다.


[[image_no_caption-id011]]
image::images/dbtm_02in03.png[]

If you examine any successful, efficient culture, you'll find high
value placed on numerous channels of communication, such as mailing
lists, design docs, chat rooms, mission statements, code comments,
production how-tos, and more. It takes considerable effort to make
sure everyone on a team agrees on the team's direction and understands
exactly what the team needs to do. All this effort, however, is an
investment that pays off in increased productivity and team happiness.

성공적이고 효율적인 문화를 살펴보면, 메일링 리스트, 디자인 문서, 채팅방, 미션 문서, 코드 주석, 운영 방법서 등 수많은 커뮤니케이션 채널에 높은 가치를 두고 있음을 알 수 있습니다.
팀의 모든 구성원이 팀의 방향에 동의하고 무엇을 해야 하는지 정확히 이해하도록 만드는 데는 상당한 노력이 듭니다.
그러나 이 모든 노력은 생산성과 팀의 행복을 높여주는 투자입니다.

((("asynchronous communication")))((("communication","synchronous vs. asynchronous")))((("synchronous communication")))A good general rule around communication is to include as few people
as necessary in __synchronous__ communication (like meetings and phone
calls), and to go for a broader audience in __asynchronous__
communication (like email, issue trackers, and document
comments). Synchronous communications have a high cost: they require
that participants interrupt their workday and receive information on
your schedule. Asynchronous communications, however, can be dealt with
at a time and place most convenient for the recipient.  Every time you
interrupt someone's work it will take some amount of time for them to
get back up to speed—always be conscious of when you're doing this.

커뮤니케이션의 일반적인 규칙은, __동기식__ 커뮤니케이션(회의, 통화 등)에는 꼭 필요한 최소한의 사람만 포함하고, __비동기식__ 커뮤니케이션(이메일, 이슈 트래커, 문서 댓글 등)에는 더 폭넓은 대상을 포함하라는 것입니다. 동기식 커뮤니케이션은 비용이 큽니다. 상대의 업무 시간을 끊고 여러분의 일정에 맞춰 정보를 받도록 요구하기 때문입니다. 반대로 비동기식 커뮤니케이션은 수신자가 가장 편한 시간과 장소에서 처리할 수 있습니다. 누군가의 일을 방해할 때마다 다시 몰입 상태로 돌아오려면 시간이 걸립니다—여러분이 방해를 만드는 순간을 항상 의식하세요.

But most importantly, you should make certain that all
information is available to as many people as possible in your
project's documentation. Let's cover the primary communication mechanisms that
people use in the process of writing software with a
team. Some of these may seem
obvious, but there are many nuances that make them worth
reviewing. One thing is certain: if you don't expend any effort on
good communication, you'll
waste considerable effort doing work that's either unnecessary or
already being done by other members of your team.

하지만 가장 중요한 것은, 모든 정보를 프로젝트 문서에 가능한 한 많은 사람이 접근할 수 있도록 보장하는 일입니다. 이제 팀으로 소프트웨어를 만드는 과정에서 사람들이 활용하는 주요 커뮤니케이션 수단들을 살펴보겠습니다. 언뜻 당연해 보이는 것들도 있겠지만, 다시 짚을 만한 미묘한 차이가 많습니다. 한 가지는 분명합니다. 커뮤니케이션에 노력을 들이지 않으면, 불필요한 일을 하거나 이미 다른 팀원이 하고 있는 일을 되풀이하느라 엄청난 노력이 낭비됩니다.

[[high-level_synchronization]]
=== High-Level Synchronization

((("communication","high-level synchronization", id="ixch02asciidoc8", range="startofrange")))((("high-level synchronization", id="ixch02asciidoc9", range="startofrange")))((("synchronization, high-level", id="ixch02asciidoc10", range="startofrange")))At the highest level, the team needs to keep common
goals in sync and follow best practices around
communicating their progress.

가장 높은 수준에서는, 팀이 공통의 목표를 일치시키고 진행 상황을 소통하는 모범 사례를 따를 필요가 있습니다.

[[the_mission_statementmdashno_really]]
==== The Mission Statement—No, Really

((("communication","and mission statements", id="ixch02asciidoc11", range="startofrange")))((("mission statements", id="ixch02asciidoc12", range="startofrange")))When you hear someone say "mission statement," the odds are good that
the first thing that springs to mind are the insipid, overhyped,
marketing-speak mission statements that are bandied about by a lot of
big companies. An example is the following mission statement from a
very large telecommunications company that will remain nameless:

누군가 “미션 스테이트먼트”라고 말하면, 대기업들이 흔히 내세우는 싱겁고 과장된 마케팅 문구가 먼저 떠오르기 마련입니다. 예를 들어, 이름은 밝히지 않을 어느 대형 통신사의 미션 문구를 보시죠:

[quote]
____
We aspire to be the most admired and valuable company in the
world. Our goal is to enrich our customers' personal lives and to make
their businesses more successful by bringing to market exciting and
useful communications services, building shareowner value in the
process.
____


Oddly enough, I've yet to meet __anyone__ who admires that company!
Here's another example from another major corporation:

아이러니하게도, 우리는 그 회사를 __존경한다__고 말하는 사람을 아직 못 만났습니다! 다음은 다른 대기업의 예입니다:

[quote]
____
Providing solutions in real time to meet our customers' needs.
____


What does that even __mean__? It could mean absolutely anything at
all—if we worked for that company, we wouldn't know if it was more
important to wash the car, fix a leaky pipe, or deliver a pizza. It's
this kind of corporate doublespeak that gives mission statements a bad
name.

도대체 무슨 __뜻__일까요? 문자 그대로 아무 의미로나 해석될 수 있습니다—우리가 그 회사에서 일한다면, 차를 닦는 일이 중요한지, 새는 파이프를 고치는 게 중요한지, 아니면 피자를 배달하는 게 중요한지조차 알 수 없을 겁니다. 바로 이런 기업식 이중언어 때문에 미션 스테이트먼트가 나쁜 평판을 얻게 됩니다.

For an effective, efficient team, writing a mission statement is a way
to concisely define the direction and limit the scope of your
product. Writing a good mission statement takes some time and effort,
but it can potentially save you __years__ of work by clarifying what
your team should and shouldn'tfootnote:[We can't
stress enough how important this is—saying no to all of the
distractions is what keeps you focused.] be working on.

효과적이고 효율적인 팀에게 미션 스테이트먼트 작성은, 제품의 방향을 간결하게 정의하고 범위를 제한하는 방법입니다. 좋은 미션 문서를 쓰려면 시간과 노력이 들지만, 팀이 해야 할 일과 하지 말아야 할 일을 명확히 함으로써 잠재적으로 __수년__의 일을 절약할 수 있습니다.footnote:[이 점은 아무리 강조해도 지나치지 않습니다—온갖 산만함에 ‘아니오’라고 말하는 것이 집중을 지키는 핵심입니다.]

When Google decided to move development of the((("Google Web Toolkit (GWT)"))) Google Web Toolkit (GWT) to an open source project, we acted
as the team mentors. We reviewed the many differences between open and
closed source development, paying specific attention to the
difficulties of designing, discussing, and writing software in an
environment where anyone can poke their nose in to offer an opinion,
contribute a patch, or criticize the most minute aspect of your
product.footnote:[We've often likened writing open
source software to building card houses on a trampoline. It takes a
steady hand, a lot of patience, and a willingness to deal with people
who leap before looking.] After going over these challenges, we told
the team they needed to come up with a mission statement as a way to
describe to the public at large what their product goals (and nongoals!) were.

구글이 ((("Google Web Toolkit (GWT)")))Google Web Toolkit(GWT)의 개발을 오픈 소스 프로젝트로 전환하기로 했을 때, 우리는 팀의 멘토를 맡았습니다. 오픈 소스와 폐쇄형 개발 사이의 여러 차이를 검토하며, 누구나 끼어들어 의견을 내고, 패치를 기여하며, 제품의 사소한 부분까지 비판할 수 있는 환경에서 설계·토론·코드 작성이 얼마나 어려운지에 특히 주목했습니다.footnote:[오픈 소스 소프트웨어를 쓰는 일은 트램펄린 위에 카드로 집을 짓는 것과 비슷하다고 자주 비유해 왔습니다. 꾸준한 손놀림과 많은 인내, 그리고 앞서 뛰어드는 사람들을 상대할 각오가 필요합니다.] 이런 도전들을 살펴본 뒤, 우리는 팀에 미션 스테이트먼트를 만들어 대중에게 제품의 목표(그리고 비목표)를 설명하라고 권했습니다.

Some of the team members balked at this for many of the reasons
outlined earlier, but others seemed curious, and the team lead seemed
to think it was a great idea. However, when we sat down to start
writing the mission statement, a lot of debate about the content,
substance, and style of the mission statement ensued. After a great
deal of discussion (and a few more meetings), the team came up not
only with a great, concise mission statement, but also an entire
document called "Making GWT Better"footnote:["Making GWT Better" is
located at
link:$$http://code.google.com/webtoolkit/makinggwtbetter.html$$[] and
is worth a read as a model mission statement document.] explaining the
statement phrase by phrase. They even included a section that
described what the project's
__nongoals__ were. Here's the mission statement:

팀원들 중 일부는 앞서 말한 이유들로 난색을 보였지만, 다른 이들은 호기심을 보였고 팀 리드는 훌륭한 제안이라 여기는 듯했습니다. 그러나 막상 미션 문서를 쓰기 시작하자, 내용과 골자, 문체를 두고 논쟁이 이어졌습니다. 충분한 토론(과 몇 번의 추가 회의) 끝에 팀은 훌륭하고 간결한 미션 문서뿐 아니라, 해당 문장을 구절별로 설명한 “Making GWT Better”라는 전체 문서를 만들었습니다.footnote:[“Making GWT Better”는 link:$$http://code.google.com/webtoolkit/makinggwtbetter.html$$[]에서 볼 수 있으며, 모범적인 미션 문서로 읽어볼 가치가 있습니다.] 심지어 프로젝트의 __비목표__가 무엇인지 설명하는 섹션까지 포함했습니다. 다음이 그 미션입니다:

[quote]
____
GWT's mission is to radically improve the web experience for users
by enabling developers to use existing Java tools to build
no-compromise AJAX for any modern browser.
____

There's a ton of substance packed into that sentence, and we think
it's an excellent example of a mission statement: it includes both a
direction (improve the web experience…by enabling developers) and a
scope limiter (Java tools). Several years later we were having dinner
with the team lead, and Fitz told him how thankful we were that he had
supported us so strongly in our effort to get the team to write a
mission statement. He
responded that he had actually thought the entire exercise was a waste
of time when we first proposed it, but that once he started debating
it with the team, he discovered something he'd never known: his lead
engineers did not agree on the direction of the product!

저 짧은 문장에 실질적인 내용이 가득합니다. 방향(“개발자가 사용할 수 있도록 하여 웹 경험을 개선”)과 범위 제한(“Java 도구”)이 모두 담겼다는 점에서 미션 문서의 훌륭한 본보기입니다. 수년 뒤 팀 리드와 저녁을 먹으며, Fitz는 팀이 미션 문서를 쓰도록 한 노력에 그가 강력히 힘을 실어 준 데 대해 고맙다고 말했습니다. 그는 처음에는 이 모든 과정이 시간 낭비라고 생각했지만, 팀과 논의를 시작하고 나서야 자신도 몰랐던 사실—리드 엔지니어들이 제품의 방향에 합의하지 못하고 있었다—을 알게 되었다고 답했습니다.

In this case, writing a mission statement forced them to confront
their differences and come to an agreement on their product's
direction, a problem that could have slowed down (or stopped)
development of the product as time went on. They posted their mission
statement on the Web, and not only did the entire team have a laser
focus on what they wanted to do with their product, but it saved them
months of time arguing with potential contributors about the product's
direction—they just pointed newcomers to "Making GWT Better" and most questions were
answered.

이 경우 미션 문서를 쓰는 과정이 팀의 이견을 마주하게 했고, 제품의 방향에 합의하도록 만들었습니다. 그렇지 않았다면 시간이 지날수록 개발이 느려지거나 멈췄을 수도 있는 문제였습니다. 그들은 미션 문서를 웹에 게시했고, 전 팀이 제품에서 무엇을 하려는지에 ‘레이저처럼’ 집중하게 되었을 뿐 아니라, 기여 희망자들과 제품 방향을 두고 몇 달을 소모할 논쟁도 줄었습니다—신규 참여자에게 “Making GWT Better”를 안내하면 대부분의 질문이 해결됐습니다.


[[image_no_caption-id012]]
image::images/dbtm_02in04.png[]

As your project progresses, the mission statement keeps things on
track. It shouldn't become an insurmountable impediment to change,
however. If radical changes happen to the environment or business plan
(say, at a startup company), software team members need to be honest
with themselves and reevaluate whether the mission still makes
sense. Changing a constitution is a deliberately difficult process, as
it prevents people from doing so whimsically. But in dramatic times
it's at least __possible__ to change it and it should be
considered. If a company or product pivots suddenly, the mission
statement needs to keep up.(((range="endofrange", startref="ixch02asciidoc12")))(((range="endofrange", startref="ixch02asciidoc11")))

프로젝트가 진행되는 동안, 미션 문서는 궤도를 유지하게 합니다. 다만 변화에 대한 넘을 수 없는 장벽이 되어서는 안 됩니다. 환경이나 사업 계획에 급격한 변화가 생기면(예: 스타트업), 팀은 스스로에게 솔직해져 그 미션이 여전히 유효한지 재평가해야 합니다. 헌법을 바꾸기 어렵게 만든 이유는, 변덕으로 바꾸지 못하게 하기 위해서입니다. 하지만 격변의 시기에는 적어도 바꿀 __가능성__이 있어야 하며, 검토되어야 합니다. 회사나 제품이 급격히 피벗한다면, 미션 문서도 그에 맞춰 업데이트되어야 합니다.(((range="endofrange", startref="ixch02asciidoc12")))(((range="endofrange", startref="ixch02asciidoc11")))

[[efficient_meetings]]
==== Efficient Meetings

((("communication","efficient meetings", id="ixch02asciidoc13", range="startofrange")))((("meetings","efficient", id="ixch02asciidoc14", range="startofrange")))Most people would classify meetings as a necessary evil. While they
can be highly effective when used skillfully, they're frequently
abused, usually disorganized, and almost always too long. We like our
meetings like we like our sewage treatment plants: few, far between,
and downwind. So we'll keep this section brief and just cover team
meetings.

대부분의 사람은 회의를 ‘필요악’으로 분류합니다. 잘만 쓰면 매우 효과적일 수 있지만, 회의는 자주 남용되고, 보통 정리가 안 되어 있으며, 거의 언제나 너무 깁니다. 우리는 회의를 하수처리장처럼 대합니다. 적고, 드물며, 바람 아래에 있길 바랍니다. 그래서 이 섹션은 짧게, 팀 회의만 다루겠습니다.

((("daily standups (standing meetings)")))((("meetings","standups")))((("standups (standing meetings)")))Let's start with the most dreaded meeting of
all: the standing meeting. This meeting
usually takes place every week, and should absolutely be kept to basic
announcements and introductions—going around the room for a status
update from every attendee (whether they have something important to
add or not) is a recipe for wasted time, rolling eyes, and a burning
desire to punch yourself in the throat just to make it end.

모든 회의 중 가장 두려운 것부터 시작해 봅시다. 정기 회의입니다. 이 회의는 보통 매주 열리며, 기본적인 공지와 소개로 __딱__ 제한해야 합니다. 참석자 전원을 돌며(중요한 말이 있든 없든) 현황을 말하게 하는 관행은 시간을 낭비하고, 눈을 굴리게 만들며, 빨리 끝내려고 목을 치고 싶은 욕망을 불러일으키는 지름길입니다.

Anything worth deeper discussion should take place after the meeting,
with only the relevant people sticking around for it. This is also a
great way to avoid derailing a meeting when someone starts to do a
deep dive into a particular meeting topic: the person running the
meeting should just add the topic to a list((("sidebars"))) of "sidebars" and once the
meeting is over, review them one at a time. If your team makes this a
habit, it's easy to call "sidebar" on something that's getting
off-track without putting anyone off. The key to making this meeting
work is that people should be happy to leave the meeting once the main
part of it is done, and if there's nothing that needs to be covered,
or information that can be disseminated by email, don't hesitate to
cancel the meeting. We've seen some cultures where meeting attendance
is equated with status, so nobody wanted to be left out. Not to put
too fine a point on it, but that is patently insane.

더 깊은 논의가 필요한 건 회의 후에, 관련자만 남겨서 진행하세요. 누군가 특정 주제로 깊이 파고들어 회의를 탈선시키려 할 때도 같은 방식이 좋습니다. 진행자는 그 주제를 “사이드바(sidebar)” 목록에 추가하고, 본회의가 끝난 뒤 하나씩 검토하면 됩니다. 이를 습관화하면, 주제가 벗어나기 시작할 때 누구의 기분도 상하지 않게 “사이드바”를 선언하기 쉬워집니다. 이 회의를 잘 굴리는 핵심은, 본 파트가 끝나면 사람들이 기꺼이 자리를 떠나도록 하는 것입니다. 다룰 게 없거나 이메일로 충분히 전파할 수 있으면, 주저 말고 회의를 취소하세요. 참석이 곧 지위인 양 여겨져 모두가 빠지기 싫어하는 문화도 봤습니다. 노골적으로 말해, 그건 명백히 미친 일입니다.

[[note-2]]
.Daily standups
[NOTE]
====

Some engineers swear by daily standups that are promoted by
development methodologies like ((("Agile")))Agile, and
these are acceptable if they are kept short and on point. These
meetings usually start their lives short—15 minutes—with everyone
actually standing up and giving a brief update on what they're working
on, but without constant vigilance they tend to quickly turn into
30-minute-long sit-down meetings where people ramble on and on like
they're in a group therapy session. If your team is going to have
these meetings, __someone__ needs to run them with authority and keep
their growth in check.

어떤 엔지니어들은 ((("Agile")))애자일 같은 개발 방법론이 권하는 데일리 스탠드업을 강력히 신봉합니다. 짧고 핵심만 지킨다면 괜찮습니다. 이런 회의는 보통 15분 내외로, 모두가 실제로 서서 자신이 하는 일을 간단히 공유하는 것으로 시작합니다. 하지만 엄격한 경계가 없으면 곧장 30분짜리 앉은 회의로 변해, 그룹 치료처럼 주절거리는 자리가 되기 쉽습니다. 이런 회의를 할 거라면, __누군가__ 권위를 갖고 운영하며, 회의가 비대해지지 않게 억제해야 합니다.

====

If you're trying to design something new, try to include no more than
five people in your meeting—it's practically impossible to come up
with new designs and make decisions with more than five people in a
room unless there's only one person in the room making the
decisions. If you don't believe us, get five of your friends together,
go downtown, and try to decide among the six of you how to do a
walking tour that hits half a dozen tourist sites. The odds are good
that you'll stand on the street corner arguing for most of the day
unless you simply declare one person to be the final arbiter and then
follow her wherever she goes.

새로운 것을 설계하려면 회의는 다섯 명 이내로 유지하세요. 다섯 명이 넘으면, 한 사람이 독단적으로 결정하지 않는 이상 새로운 설계를 내고 결정을 내리기가 사실상 불가능합니다. 믿기지 않으면 친구 다섯을 불러 여섯이 함께 시내로 나가, 관광지 여섯 곳을 도는 도보 여행 코스를 정해 보세요. 한 사람을 최종 심판으로 정해 그를 따라다니는 게 아니라면, 하루 종일 길모퉁이에서 언쟁만 하게 될 확률이 높습니다.


[[image_no_caption-id013]]
image::images/dbtm_02in05.png[]

((("make time")))Meetings are frequently an interruption to what many refer to as "make
time," inspired by ((("Graham, Paul")))Paul Graham's "Maker's
Schedule, Manager's
Schedule."footnote:[link:$$http://www.paulgraham.com/makersschedule.html$$[]] It can be hard for anyone, especially
engineers, to get into the zone if they're constantly stopping work to
attend meetings. Schedule time on your calendar in three- to four-hour
blocks and label these blocks as "busy" or even "make time," and get
your work done. If you have to set up a meeting, try to set it up near another natural break in
the day, like lunchtime, or at the very end of the day. At Google,
there's a long (and unfortunately, often ignored) tradition of
"No-meeting Thursdays"footnote:[Google Engineering
VP ((("Rosing, Wayne")))Wayne Rosing started this in 2001 in an
attempt to improve the engineers' quality of life. Fitz blocked off
his Thursdays for years, and it worked fairly well but required
pretty rigorous monitoring and the occasional grumpy email when
someone scheduled over it.] in the interest of clearing time to just
get work done. This is a good first step on the path to having 20 to
30 hours of make time set aside in larger blocks.

회의는 흔히 많은 이들이 “메이크 타임(make time)”이라고 부르는 시간을 방해합니다. 이는 ((("Graham, Paul")))폴 그레이엄의 “Maker's Schedule, Manager's Schedule”에서 영감을 받은 개념입니다.footnote:[link:$$http://www.paulgraham.com/makersschedule.html$$[]] 특히 엔지니어에게는 회의 때문에 일을 계속 끊어야 하면 몰입 상태에 들어가기 어렵습니다. 캘린더에 3~4시간짜리 블록을 잡아 “바쁨” 혹은 아예 “메이크 타임”으로 표시하고, 그 시간에 일을 끝내세요. 회의를 잡아야 한다면 점심시간 같은 자연스러운 휴식 지점이나 하루의 맨 끝에 배치하세요. 구글에는 “목요일 회의 금지” 전통이 오래(그리고 안타깝게도 자주 무시되면서) 이어져 왔습니다.footnote:[구글 엔지니어링 부사장 ((("Rosing, Wayne")))웨인 로징이 2001년에 엔지니어의 삶의 질을 높이기 위해 시작했습니다. Fitz는 수년간 목요일을 막아두었고, 꽤 잘 작동했지만 엄격한 모니터링과 가끔은 회의를 잡은 사람에게 퉁명스러운 이메일을 보내는 일도 필요했습니다.] 그냥 일만 하는 시간을 확보하기 위한 취지입니다. 이것은 더 긴 블록으로 20~30시간의 메이크 타임을 확보하는 첫걸음입니다.

[[note-3]]
[NOTE]
====
Five simple rules for running a meeting:


. Only invite people who absolutely need to be there.


. Have an agenda and distribute it well before the meeting starts.


. End the meeting early if you've accomplished the meeting's
goals.


. Keep the meeting on track.


. Try to schedule the meeting near other interrupt points in your day
(e.g., lunch, end of day).

회의 운영을 위한 간단한 다섯 가지 규칙:

. 꼭 필요하지 않은 사람은 초대하지 말 것.

. 안건을 준비하고, 회의 전에 충분히 공유할 것.

. 회의 목표를 달성했다면, 일찍 끝낼 것.

. 회의가 벗어나지 않도록 관리할 것.

. 다른 방해 지점(예: 점심, 퇴근 직전)과 가깝게 일정을 잡을 것.

====

If you're going to have a meeting, create an agenda and distribute it
to all attendees at least a day before the meeting so that they'll
know what to expect. Invite as few people as possible (remember the
cost of synchronous communication). We know team members, managers,
and even directors and VPs who will flat out ignore invitations to a
meeting that has no agenda.

회의를 해야 한다면, 안건을 만들고 최소 하루 전에 참석자 모두에게 배포하세요. 무엇을 기대해야 하는지 알게 하려는 것입니다. 동기식 커뮤니케이션의 비용을 기억하며, 가능한 적은 인원만 초대하세요. 우리는 안건이 없는 회의 초대는 단칼에 무시하는 팀원, 매니저, 심지어 디렉터와 VP들도 알고 있습니다.

Only invite people to the meeting who actually need to be there for
the meeting to accomplish its goal. Some people have taken to banning
laptops in meetings
after they've noticed attendees reading email instead of paying
attention, but this is attacking the symptom and not the cause—people
start reading email in a meeting because they probably __don't need to
be in the meeting in the first place__.

회의의 목표를 달성하는 데 실제로 필요한 사람만 초대하세요. 참석자들이 집중하지 않고 이메일을 본다는 이유로 회의장 노트북 반입을 금지하는 사람들도 있습니다. 하지만 이는 원인이 아니라 증상을 공격하는 일입니다—사람들이 회의에서 이메일을 보기 시작하는 이유는, 아마도 __그들이 애초에 그 회의에 있을 필요가 없기 때문__입니다.

Whoever's running the meeting should actually run the meeting and not
hesitate to (gently) cut off someone who veers off-topic or, even
worse, tries to monopolize the conversation. Doing this well can be
tricky, but is worthwhile. And most importantly, don't be afraid to
end a meeting early if you've completed the
agenda.(((range="endofrange", startref="ixch02asciidoc14")))(((range="endofrange", startref="ixch02asciidoc13")))

회의를 운영하는 사람은 정말로 회의를 운영해야 합니다. 주제에서 벗어나거나, 더 나쁘게는 대화를 독점하려 드는 사람을 (부드럽지만) 과감히 제지하세요. 잘 해내기 어렵지만 그만한 가치가 있습니다. 그리고 가장 중요한 점. 안건을 마쳤다면 겁내지 말고 회의를 일찍 끝내세요.(((range="endofrange", startref="ixch02asciidoc14")))(((range="endofrange", startref="ixch02asciidoc13")))

[[working_in_a_geographically_challenged_t]]
==== Working in a "Geographically Challenged" Team

((("communication","for geographically challenged teams", id="ixch02asciidoc15", range="startofrange")))((("distributed teams", id="ixch02asciidoc16", range="startofrange")))((("geographically challenged teams", id="ixch02asciidoc17", range="startofrange")))((("teams","geographically challenged", id="ixch02asciidoc18", range="startofrange")))When you're part of a distributed team or
working remotely from them, you not only need to find different ways
to communicate, but also need to put more work into communication,
period. If you're on a team that has remote workers, this means
documenting and sharing decisions in writing, usually over
email. Online chats, instant messages, and hallway
conversations might be where a lot of discussion takes place, but
there needs to be some way to broadcast relevant discussions like
these to everyone to make sure they're informed and participating (and
as a bonus, archived email lists provide
documentation). Video chat is also incredibly
useful as a quick conversation enabler, and besides, these days most
laptops have built in webcams.

분산된 팀의 일원이거나 원격으로 일한다면, 단지 다른 소통 방법을 찾는 데 그치지 않고, 아예 커뮤니케이션 자체에 더 많은 노력을 기울여야 합니다. 팀에 원격 근무자가 있다면, 보통 이메일을 통해 의사결정을 문서화하고 공유해야 한다는 뜻입니다. 온라인 채팅, 인스턴트 메시지, 복도 대화에서 많은 논의가 이루어질 수 있지만, 이런 관련 논의를 모두에게 전파해 모두가 정보를 받아보고 참여하도록 만드는 장치가 필요합니다(게다가 메일링 리스트 아카이브는 문서화라는 보너스도 제공합니다). 영상 통화도 빠른 대화를 이끌어내는 데 매우 유용하고, 요즘은 대부분의 노트북에 웹캠이 달려 있습니다.

In the Subversion project we had a motto: "If the discussion didn't
happen on the email list, then it never really happened." People spent
lots of time bandying around ideas in chat rooms, but in order to
make the resolutions "real" we had to be mindful of everyone else who
didn't witness them. By forcing conversations to repost to email
lists, we gave the entire distributed team a chance to see how
decisions were arrived at (and to speak up if they wanted to). This is
particularly critical if you're trying to encourage a consensus-based
team culture.

서브버전(Subversion) 프로젝트에는 이런 모토가 있었습니다. “메일링 리스트에서 일어나지 않은 논의는, 실제로는 일어나지 않은 것이다.” 사람들은 채팅방에서 아이디어를 주고받는 데 많은 시간을 썼지만, 결정을 “진짜”로 만들려면 그 장면을 보지 못한 모두를 고려해야 했습니다. 대화를 메일링 리스트로 재게시하게 만들면서, 분산된 팀 전체가 의사결정이 어떻게 이뤄졌는지 볼 기회를 얻었고(원한다면 의견도 낼 수 있었습니다), 합의 기반 팀 문화를 장려하려 한다면 특히 중요했습니다.

Talking to someone from a remote location should be as frictionless as
walking over to their desk. If you're working remotely,
overcommunicate with your team using every available medium (e.g.,
online chat, instant
messages, email, video chat, phone calls, etc.) to make sure everyone
knows not only that you exist, but also what you're working on. And
most important of all, __do not underestimate the bandwidth of a
face-to-face conversation__.

원격지의 누군가와 대화하는 일은, 그 사람 책상으로 걸어가 말을 거는 만큼이나 마찰이 없어야 합니다. 원격으로 일한다면, 온라인 채팅, 인스턴트 메시지, 이메일, 영상 통화, 전화 등 가능한 모든 수단으로 팀과 과하게 소통하세요. 여러분이 ‘존재’한다는 사실뿐 아니라 지금 무엇을 하고 있는지도 모두가 알도록 하기 위해서입니다. 그리고 무엇보다도, __대면 대화의 대역폭을 과소평가하지 마세요__.

Fitz once had an engineer who was working with a team in Colorado, and
she was having trouble getting momentum on the project that she was
sharing with them. She pulled Fitz aside to tell him this and he told
her that she should hop on a flight to Colorado and spend a week with
the team to kickstart their project. Two weeks later, she emailed Fitz
from Colorado, after spending only a day there, with great news—not only
had she gained great momentum on the project, but she was getting
along great with the team after joining them for lunch and drinks
after work.

Fitz가 한번은 콜로라도 팀과 함께 일하는 엔지니어를 둔 적이 있습니다. 그녀는 공동 프로젝트의 동력을 얻는 데 어려움을 겪고 있었습니다. 그녀가 Fitz에게 이를 털어놓자, Fitz는 비행기를 타고 콜로라도로 가 팀과 일주일을 함께 보내며 프로젝트에 시동을 걸라고 조언했습니다. 2주 뒤, 그녀는 콜로라도에서 단 하루만 보낸 후 좋은 소식과 함께 이메일을 보냈습니다. 프로젝트에 큰 동력을 얻었을 뿐 아니라, 점심을 함께 먹고 퇴근 뒤에 한잔하면서 팀과 아주 잘 지내게 되었다는 소식이었습니다.

Ben once had a team member, Corey, who started a new project with a
team in another office. Corey was having a bit of a tough time getting
traction with the new team and lamented this to Ben in their weekly
one-on-one. Ben told Corey that he should fly out to the team's office
and sit with them for a week to kick off the project. Corey was
hesitant because of the cost of a flight and hotel, but
he wasn't accounting for the __benefit__ of the trip. Corey took a
two-day trip to work with the team and he immediately realized how
valuable it was to be there with the team. Not only did he gain the
benefit of the additional bandwidth of in-person conversation, but, by
having lunch together, and going out together after work one
day, Corey and the team all got to know each other as __people__. As a result,
future interactions with the team went much more smoothly, despite the
fact that Corey was a thousand miles
away.

Ben에게는 다른 오피스 팀과 새 프로젝트를 시작한 Corey라는 팀원이 있었습니다. Corey는 새 팀에서 동력을 얻기 어렵다며, 둘의 주간 1:1에서 이를 하소연했습니다. Ben은 비행기를 타고 그 팀의 오피스로 가 일주일간 함께 앉아 프로젝트를 시작하라고 했습니다. Corey는 항공료와 숙박비 때문에 주저했지만, 그 여행의 __이익__을 고려하지 못하고 있었습니다. Corey는 이틀 일정으로 팀과 함께 일했고, 현장에 함께 있는 것이 얼마나 가치 있는지 곧바로 깨달았습니다. 대면 대화의 높은 대역폭이 주는 이점뿐 아니라, 점심을 먹고 하루는 퇴근 뒤에 함께 나가며, Corey와 팀은 서로를 __사람__으로 알게 되었습니다. 그 결과 Corey가 천 마일이나 떨어져 있었음에도, 이후 팀과의 상호작용은 훨씬 원활해졌습니다.

[[note-3a]]
.Nothing replaces being in the same room
[NOTE]
====
((("communication","face-to-face")))((("face-to-face communication")))One thing to note about all of these people is that, despite all the
advances in social media and videoconferencing technology, nothing
even comes close to the bandwidth and the intimacy of being face to
face with someone else in real life. If you're starting a new project
or have an important meeting with someone in your company and you have
the budget to be there in person, it's almost always worth the hassle
of traveling. The impact of an in-person discussion etches itself into
memory in ways that phone or video chats can't compete with.

여기서 언급된 모든 사람과 사례를 통해 알 수 있는 점이 하나 있습니다. 소셜 미디어와 화상회의 기술이 아무리 발전해도, 현실에서 서로 얼굴을 맞대는 대면 대화의 대역폭과 친밀함에 비할 바가 못 된다는 것입니다. 새 프로젝트를 시작하거나 회사 내 중요한 만남이 있고, 직접 갈 예산이 있다면, 번거롭더라도 이동할 가치는 거의 언제나 충분합니다. 대면 대화의 여운은 전화나 화상 통화가 따라올 수 없는 방식으로 기억에 새겨집니다.

A frequent argument against business travel is that it's too expensive
or, in some cases, not affordable. While this may be the case for
small geographically distributed companies, most large companies can
afford this expense. The cost of not spending face time with your
colleagues is higher than you think.

출장에 반대하는 흔한 주장 중 하나는 비용이 너무 많이 든다는 것입니다(혹은 아예 감당이 안 된다는 것). 지리적으로 분산된 소규모 회사에는 그럴 수 있습니다. 하지만 대부분의 대기업은 그 비용을 감당할 수 있습니다. 동료들과 얼굴을 맞대고 시간을 보내지 않는 데 드는 비용은 여러분이 생각하는 것보다 큽니다.

====



No matter how much you email, chat, or call, don't be afraid to
regularly get on a plane and visit the rest of your team. This goes
for remote employees, remote teams, and remote offices as well—make
the time to get out to the home office and talk to
people.(((range="endofrange", startref="ixch02asciidoc18")))(((range="endofrange", startref="ixch02asciidoc17")))(((range="endofrange", startref="ixch02asciidoc16")))(((range="endofrange", startref="ixch02asciidoc15")))

이메일을 얼마나 하고, 채팅과 통화를 얼마나 하든, 주기적으로 비행기를 타고 팀을 방문하는 일을 두려워하지 마세요. 이는 원격 직원, 원격 팀, 원격 오피스 모두에 해당합니다—본사로 나가 사람들과 직접 대화할 시간을 만드세요.(((range="endofrange", startref="ixch02asciidoc18")))(((range="endofrange", startref="ixch02asciidoc17")))(((range="endofrange", startref="ixch02asciidoc16")))(((range="endofrange", startref="ixch02asciidoc15")))

[[design_docs]]
==== Design Docs

((("communication","and design docs")))((("design docs")))((("software","design docs for")))If you're an engineer, it's sometimes difficult to resist the urge to
take a running leap into writing code for a new project, but this is
rarely fruitful (unless you're throwing together a quick and dirty
prototype). Just the same, many engineers rush right into coding
before designing the software they intend to write, and this usually
ends very badly.

엔지니어라면 새 프로젝트에서 당장 코딩으로 뛰어들고 싶은 충동을 참기 어려울 때가 있습니다. 하지만 이는 (대충 뚝딱 만든 프로토타입이 아니라면) 거의 결실을 맺지 못합니다. 그럼에도 많은 엔지니어가 설계 전에 코딩부터 서두르곤 하고, 보통은 아주 좋지 않은 결말로 이어집니다.

A design doc is typically owned by one person, authored by two or
three, and reviewed by a larger set. It serves not only as a
high-level blueprint of your future project, but also as a low-cost
way to communicate to your larger team what you want to do and how you
intend to do it. Since you haven't spent weeks (or months) writing
code, it's a lot easier to accept criticism at this point and you'll
wind up with a better product and a better implementation. In
addition, once you've nailed down the design doc, it will serve as
your guide for both scheduling and dividing the work on your
project. Once you start coding, however, you should treat your design
doc as a living document and not one carved in stone: you and your
team __should__ update the document as your project grows and changes,
not once you've shipped, although this is easier said than done. Most
teams have no docs at all, while the rest have a short period of
awesome docs, followed by a long period of out-of-date docs.

디자인 문서는 보통 한 사람이 소유하고, 두세 사람이 작성하며, 더 많은 인원이 리뷰합니다. 이는 미래 프로젝트의 상위 청사진일 뿐 아니라, 무엇을 어떻게 할 것인지 더 큰 팀에 알리는 저비용의 커뮤니케이션 수단이기도 합니다. 아직 몇 주(혹은 몇 달)간 코드를 쓰지 않았기 때문에, 이 시점에는 비판을 받아들이기가 훨씬 쉽고 결국 더 나은 제품과 구현으로 이어집니다. 또한 디자인 문서를 확정하고 나면, 일정 수립과 작업 분할의 길잡이가 됩니다. 다만 코딩을 시작하고 나서는 디자인 문서를 돌에 새긴 것처럼 다루지 말고 살아 있는 문서로 여겨야 합니다. 프로젝트가 성장하고 변함에 따라 문서를 __반드시__ 업데이트해야지, 출시 후에야 고치는 것이 아닙니다. 말은 쉽지만 실천은 어렵습니다. 대부분의 팀은 아예 문서가 없고, 나머지는 짧은 전성기 이후 오래도록 낡은 문서를 둔 채로 지냅니다.

Having said that, make sure you don't take the "design doc religion"
to the opposite extreme. We've seen control freaks write a four-page
design essay for a program that's only 100 lines of code. If the
project can be rewritten from scratch several times in the same amount
of time it takes to write a design doc, a design doc is clearly a
waste of time. Use experience and judgment when making these time
calculations and trade-offs.(((range="endofrange", startref="ixch02asciidoc10")))(((range="endofrange", startref="ixch02asciidoc9")))(((range="endofrange", startref="ixch02asciidoc8")))

그렇다고 “디자인 문서 교”의 반대 극단으로 치닫지는 마세요. 100줄짜리 프로그램에 4페이지짜리 설계 에세이를 쓰는 통제광도 봤습니다. 디자인 문서를 쓰는 데 걸리는 시간에 프로젝트를 처음부터 여러 번 다시 쓸 수 있다면, 디자인 문서는 분명 시간 낭비입니다. 이런 시간 계산과 트레이드오프에서는 경험과 판단을 사용하세요.(((range="endofrange", startref="ixch02asciidoc10")))(((range="endofrange", startref="ixch02asciidoc9")))(((range="endofrange", startref="ixch02asciidoc8")))

[[day-to-day_discussions]]
=== Day-to-Day Discussions

((("communication","day-to-day discussions", id="ixch02asciidoc19", range="startofrange")))((("day-to-day discussions", id="ixch02asciidoc20", range="startofrange")))((("discussions, day-to-day", id="ixch02asciidoc21", range="startofrange")))Assuming high-level goals are agreed upon, you need to worry about the tools your
team uses for everyday coordination. These tools are useful, but they
tend to have narrow communication bandwidth and, usually, a complete
lack of metadata and secondary communication channels such as facial
expressions and body language. As a result, they're more conducive to
miscommunication and an inherent threat to HRT. Still, these tools are
invaluable to most teams and (with a little effort) can give a good
boost to productivity.

상위 목표에 합의했다면, 이제 일상적 협업에 팀이 사용하는 도구를 신경 써야 합니다. 이 도구들은 유용하지만, 커뮤니케이션 대역폭이 좁고, 보통은 표정과 몸짓 같은 메타데이터와 보조 채널이 전무합니다. 그 결과 오해를 낳기 쉽고 HRT에 본질적 위협이 되기도 합니다. 그럼에도 대부분의 팀에 없어서는 안 될 도구이며, 약간의 노력만으로도 생산성을 크게 끌어올릴 수 있습니다.

[[mailing_lists]]
==== Mailing Lists

((("communication","mailing lists for")))((("mailing lists")))We don't know of anyone who works with a team these days that doesn't
use at least one mailing list, but there are a few things you can do
with your mailing lists
to make them more useful.

요즘 팀으로 일하면서 메일링 리스트를 하나도 쓰지 않는 사람을 우리는 모르겠습니다. 다만 메일링 리스트를 더 유용하게 만드는 몇 가지 방법이 있습니다.

Many big successful projects have multiple mailing lists, separating
development discussions, code reviews, user discussions,
announcements, pager emails, and miscellaneous
administrivia. Sometimes smaller projects attempt to emulate this as
they're just getting started and create half a dozen mailing lists
when they've only got three engineers and two users. This is the
mailing list equivalent of providing six conference rooms for five
people to carry on a discussion—you wind up with little coherence, a
lot of echoes, and mostly empty rooms. It's really best to start with
one list, and to add lists only when the amount of traffic on one list
gets unmanageable (which is typically indicated by list members
begging for mercy). An exception to that rule is to have automated
emails and "bot" notifications go to their own list or at the very
least use identifiers that make them easy to filter.

큰 성공을 거둔 프로젝트는 메일링 리스트를 여러 개 두는 경우가 많습니다. 개발 논의, 코드 리뷰, 사용자 토론, 공지, 페이저 이메일, 기타 행정 등을 분리합니다. 종종 소규모 프로젝트가 이를 흉내 내며 시작부터 여섯 개의 리스트를 만들기도 하는데, 엔지니어 셋과 사용자 둘뿐인 상황에서 벌어지는 일입니다. 이는 다섯 사람이 논의하자고 회의실을 여섯 개 마련하는 것과 같습니다—일관성은 떨어지고, 메아리만 많고, 방은 대체로 비게 됩니다. 실제로는 리스트 하나로 시작하고, 한 리스트의 트래픽이 감당하기 어려울 때(보통 리스트 구성원들이 살려달라고 할 때)만 리스트를 추가하는 것이 가장 좋습니다. 예외적으로 자동 이메일과 봇 알림은 별도 리스트로 보내거나, 최소한 쉽게 필터링할 수 있도록 식별자를 사용하세요.

Take some time to establish proper etiquette around email
discussions—keep discussions civil, and prevent filibustering by a
((("noisy minority")))"noisy minority."footnote:[A
"noisy minority" is usually characterized by one or two people who
repeatedly respond to every single post in a thread, refuting every
argument that doesn't align with theirs. A cursory examination of the
thread in question might lead you to believe you've got a tremendous
amount of dissent when, in fact, it's coming from just one or two
disgruntled people. You need to address this behavior quickly and
carefully (see <<dealing_with_poisonous_people>> for more information
on dealing with these sorts of people).]

이메일 토론의 예절을 마련하는 데 시간을 쓰세요—토론을 예의 바르게 유지하고, ((("noisy minority")))“시끄러운 소수”의 필리버스터를 막으세요.footnote:[“시끄러운 소수”는 보통 한두 사람이 스레드의 모든 글에 일일이 답하며, 자신의 입장과 맞지 않는 모든 주장을 반박하는 행태를 보입니다. 얼핏 보면 반대가 엄청나게 많은 것처럼 보이겠지만, 실제로는 불만을 품은 한두 명일 뿐입니다. 이런 행동은 빠르고 주의 깊게 다뤄야 합니다(이런 사람들을 다루는 법은 <<dealing_with_poisonous_people>>에서 더 자세히 설명합니다).]

A mailing((("searchable indexes"))) list isn't going to be your first choice for a discussion in
a team that shares an office, but it's a good idea to send a copy of
meeting agendas, meeting notes, decisions
made, design docs, and any other relevant textual information to your
team's mailing list so that you have a convenient central record. Set
up these lists to archive all posts in a __searchable__ index, either
publicly available in the case of open source projects or on your
company's intranet if you're working on a closed source project. Now
you have a system of record for the history of your project, and it's
easy to refer back to it when a newcomer asks about the reasoning
behind one or more decisions that you made in the past. If you don't
have these discussions archived somewhere, you'll find yourself
repeating them again and again and again and again.

사무실을 함께 쓰는 팀에서 메일링 리스트가 1차 토론 수단은 아닐 수 있지만, 회의 안건, 회의록, 의사결정, 디자인 문서, 기타 관련 텍스트 정보를 팀의 메일링 리스트에 보내 중앙 기록으로 남기는 것이 좋습니다. 오픈 소스 프로젝트라면 공개 색인으로, 폐쇄형이라면 사내망 색인으로, 모든 글을 __검색 가능__하게 아카이브하세요. 이제 프로젝트의 역사를 기록하는 시스템이 생기고, 신입이 과거 의사결정의 근거를 물을 때도 쉽게 참고할 수 있습니다. 이런 논의가 어딘가에 아카이브되지 않으면, 여러분은 똑같은 이야기를 반복하고 또 반복하게 될 것입니다.

[[online_chat]]
==== Online Chat

((("chat, online", id="ixch02asciidoc22", range="startofrange")))((("communication","online chat for", id="ixch02asciidoc23", range="startofrange")))((("online chat", id="ixch02asciidoc24", range="startofrange")))Online chat is an incredibly convenient way for teams to communicate,
especially since it provides a way to send a quick request to a
teammate without interrupting her work (providing, of course, she has
her chat program configured to not interrupt her work!). It's a good
tool for teams to use if they're moving quickly on a new project,
doing some light work in the evening or on the weekend, or if one team
member is out of the office for a day or two. One-on-one chat is
useful and certainly has its place in team communication, but we
strongly recommend that teams use some sort of group chat
mechanism.footnote:[Of course, when an engineer
needs uninterrupted time and can't afford the costs of context
switching, it's totally acceptable to ignore chat.]

온라인 채팅은 팀 커뮤니케이션에 믿을 수 없을 만큼 편리합니다. 특히 동료의 업무를 방해하지 않고도 빠르게 요청을 보낼 수 있기 때문입니다(물론 채팅 프로그램이 방해하지 않도록 설정되어 있어야 합니다!). 새 프로젝트를 빠르게 진행할 때, 저녁이나 주말에 가볍게 일할 때, 팀원이 하루 이틀 자리를 비울 때 유용합니다. 일대일 채팅도 쓸모가 있고 제자리가 있지만, 우리는 어떤 형태로든 그룹 채팅 메커니즘을 사용할 것을 강력히 권장합니다.footnote:[물론 한 엔지니어가 방해받지 않아야 하고 문맥 전환 비용을 감당할 수 없는 상황이라면, 채팅을 무시해도 완전히 괜찮습니다.]

((("IRC (Internet Relay Chat)")))Years before instant messaging became wildly
popular, teams would hang out in an Internet Relay Chat (IRC)
channel and most of their discussions would be in a group chat. This
could be noisy at times, and it was easy enough for team members to
break off to have a private chat if they were discussing something
that was not of interest to the larger team, but in most cases
discussions happened "in front of" the rest of the team. This allowed
other people to join in on the conversation, lurk in the background
and follow the discussion, or even catch up on discussions they missed
earlier. This is convenient not only because of the ease with which ad
hoc group discussions can start, but also because it helps to build
community even in teams that are geographically dispersed. It's often
surprising how much a newer team member can learn just by watching (or
later reading) various discussions he's not necessarily participating
in.

인스턴트 메시징이 대중화되기 한참 전부터, 팀들은 IRC(Internet Relay Chat) 채널에 모여 대부분의 토론을 그룹 채팅으로 진행했습니다. 때로는 시끄러웠지만, 팀원들이 전체의 관심사가 아닌 주제를 논의할 때는 사적인 대화로 쉽게 빠져나갈 수 있었습니다. 하지만 대부분의 경우 토론은 팀의 다른 모두가 ‘보는 앞에서’ 진행되었습니다. 덕분에 다른 사람들이 대화에 참여하거나, 배경에서 지켜보며 흐름을 따라가거나, 나중에 놓친 토론을 따라잡을 수 있었습니다. 이는 즉석 그룹 토론을 쉽게 시작할 수 있기 때문만이 아니라, 지리적으로 흩어진 팀에서도 공동체 의식을 형성하는 데 도움이 되기 때문입니다. 새 팀원은 자신이 적극 참여하지 않은(혹은 나중에 읽기만 한) 다양한 토론을 지켜보는 것만으로도 놀랄 만큼 많은 것을 배웁니다.

With the advent of instant messaging, many of these conversations that
would previously take place in the group chat room moved to private
chat, which was the default for instant messenger. It's very tempting
to indulge your insecurity and take what might be perceived as a
stupid question to a one-on-one discussion rather than risk
embarrassment in front of the rest of the team. Unfortunately, this
increases the burden on the team because there's no shared lore
created and different team members may ask other team members the same
question over and over again.

인스턴트 메시징이 등장하면서, 예전 같으면 그룹 채팅방에서 이뤄졌을 대화가 1:1로 옮겨갔습니다. 인스턴트 메신저의 기본이 1:1 대화였기 때문입니다. 팀 앞에서 망신을 살 위험을 감수하기보다는, 스스로 불안함을 달래며 ‘어리석게 보일지 모를’ 질문을 1:1로 가져가고 싶은 유혹이 큽니다. 안타깝게도 이렇게 하면 공유된 지식이 생기지 않아 팀의 부담이 커집니다. 서로 다른 팀원들이 같은 질문을 여러 사람에게 반복해서 묻게 되기 때문입니다.

Fortunately, group chat has seen a renaissance in 2014/2015 with the
rise of Slack, a free (but not free software or open source) group
messaging client that feels a lot like a modern-day IRC.  Slack
integrates with dozens of other products and has become the messaging
tool of choice in smaller companies, startups, and even loosely
connected groups of acquaintances on the Internet.  While it still
provides a means to send private messages, team owners get a weekly
report telling them the percentage of private messages versus group
messages.  This makes it easy to give your team a gentle "push" to
have more discussions in the group channels rather than one-on-one.

다행히 2014/2015년경 슬랙(Slack)의 부상과 함께 그룹 채팅이 부흥을 맞았습니다. 슬랙은 무료(하지만 자유 소프트웨어나 오픈 소스는 아님) 그룹 메시징 클라이언트로, 현대판 IRC에 가깝습니다. 수십 종의 제품과 통합되며, 소규모 회사, 스타트업, 심지어 인터넷상 느슨한 지인 그룹에서도 선호하는 도구가 되었습니다. 사적인 메시지도 보낼 수 있지만, 팀 소유자는 주간 리포트를 통해 사적 메시지와 그룹 메시지의 비율을 확인할 수 있습니다. 덕분에 팀이 1:1보다 그룹 채널에서 더 많이 대화하도록 부드럽게 “유도”하기가 쉬워졌습니다.

Regardless of the application you use for chat, we __strongly__
recommend that your team have a convenient and accessible mechanism
for group chat. It's well worth the effort in order to have this
additional communication bandwidth in your team.

어떤 채팅 애플리케이션을 쓰든, 우리는 팀이 편리하고 접근성 높은 그룹 채팅 수단을 갖추길 __강력히__ 권합니다. 팀에 이 추가적인 커뮤니케이션 대역폭을 확보하는 일은 그만한 노력을 들일 가치가 충분합니다.



[[note-4]]
.Group chat versus 1:1 instant messages
[NOTE]
====

When many people first hear about IRC
these days, they scoff at its primitive text-based environment because
even the most modern of IRC clients tend to be less whizzy than
outdated versions of iChat or Google Talk. Don't be fooled by the
outdated look and feel of IRC—its killer features are that it was
designed for multiperson chat and it's asynchronous; most clients
keep an unlimited scroll-back record so that you can read back to see
conversations among others that you missed. Slack is basically the
modern-day version of IRC, and despite its whizzy integration of
graphics, avatars, and emoji, at its heart it's still a text-based
messaging system like IRC. It may be tempting to try out fancy
videoconferencing packages, shared whiteboard systems, and more, but
these systems often tend to be ineffective and can eliminate the
asynchronous advantage of text-based group chat. If you're going to
use something other than Slack or IRC, find something that is actually
designed for group chat and isn't just an instant messaging system
with group chat bolted on.

요즘 IRC 얘기를 처음 들은 사람들은 원시적인 텍스트 기반 환경을 비웃곤 합니다. 최신 IRC 클라이언트조차도 오래된 iChat이나 Google Talk보다 덜 번지르르해 보이기 때문입니다. 외양에 속지 마세요. IRC의 결정적 장점은 다인 채팅을 위해 설계되었고 비동기적이라는 점입니다. 대부분의 클라이언트는 무제한 스크롤백을 제공해, 놓친 대화를 나중에 읽을 수 있습니다. 슬랙은 본질적으로 현대판 IRC입니다. 멋진 그래픽, 아바타, 이모지 통합에도 불구하고, 핵심은 여전히 IRC처럼 텍스트 기반 메시징 시스템입니다. 화려한 화상 회의나 공유 화이트보드 같은 도구를 시도해 보고 싶을 수 있지만, 이런 시스템은 비효율적인 경우가 많고 텍스트 기반 그룹 채팅의 비동기 장점을 없애버리기도 합니다. 슬랙이나 IRC가 아닌 다른 도구를 쓰려면, 실제로 그룹 채팅을 위해 설계된 도구인지, 1:1 메신저에 그룹 채팅을 덧대기만 한 것은 아닌지 확인하세요.

====

Sometimes people are more comfortable chatting online: we remember the first time we went to a hackathon
where a number of open source contributors were going to meet (many
for the first time) face to face and work on their projects
together. We walked into an almost silent room to find a dozen
tables—with six to eight people per table—furiously typing away at
their laptops. We figured that, well, we were late, and everyone was
already busy writing code, so we sat down, opened our laptops, fired
up our editors, and signed on to the project's IRC channel to see if
folks who couldn't make it to the hackathon were "virtually" there. We found a number of conversations taking place in the IRC
channel. We said hello and mentioned that we'd just arrived at the
hackathon room, and imagine our surprise when several people said
hello in the IRC channel when they turned out to be sitting less than
10 feet away from us! Some of this was purely inertia as we were all
used to chatting online, but in many cases it was
just the most comfortable way for some people to communicate with the
rest of the group. Fresh off a four-hour flight and desperate for some
communication bandwidth, we got up and went from table to table to
talk with people face to face.

There are no hard and fast rules for when to use chat versus email. Chat
is more useful for fast-moving real-time discussions where a decision
can be made easily and all participants are currently available.(((range="endofrange", startref="ixch02asciidoc24")))(((range="endofrange", startref="ixch02asciidoc23")))(((range="endofrange", startref="ixch02asciidoc22"))) If
some participants aren't around or the discussion is less pressing,
email might be better.(((range="endofrange", startref="ixch02asciidoc21")))(((range="endofrange", startref="ixch02asciidoc20")))(((range="endofrange", startref="ixch02asciidoc19"))) Just keep in mind the costs of synchronous
versus asynchronous communication that we reviewed in
<<communication_patterns_of_successful_cul>>.(((range="endofrange", startref="ixch02asciidoc7")))(((range="endofrange", startref="ixch02asciidoc6")))

사람들은 온라인에서 대화하는 편이 더 편할 때가 있습니다. 우리는 여러 오픈 소스 기여자가(그중 다수는 처음으로) 얼굴을 맞대고 프로젝트를 함께 하던 첫 해커톤을 기억합니다. 방에는 6~8명씩 앉은 12개 테이블이 있었지만, 거의 침묵 속에 모두 노트북을 두드리고 있었습니다. 우리는 늦게 도착해 다들 코드를 쓰고 있구나 싶어, 자리에 앉아 에디터를 열고 프로젝트 IRC 채널에 접속했습니다. 현장에 오지 못한 이들이 “가상으로” 와 있는지 보려던 것이었죠. 그런데 채널에선 여러 대화가 진행 중이었고, 우리가 방에 막 도착했다고 인사하자 몇몇이 IRC에서 인사를 건넸습니다. 확인해 보니 그들은 우리로부터 3미터도 떨어지지 않은 곳에 앉아 있었습니다! 관성 탓도 있었겠지만, 많은 이들에게는 온라인이 그룹과 소통하기 가장 편안한 방식이었기 때문입니다. 4시간 비행을 마치고 더 넓은 대역폭의 소통이 절실했던 우리는 자리에서 일어나 테이블마다 돌아다니며 직접 인사를 나눴습니다.

채팅과 이메일 중 무엇을 언제 써야 하는지에 대한 철칙은 없습니다. 실시간으로 빠르게 진행되는 논의에서, 결정이 쉽게 내려지고 모든 참여자가 현재 자리에 있다면 채팅이 더 유용합니다.(((range="endofrange", startref="ixch02asciidoc24")))(((range="endofrange", startref="ixch02asciidoc23")))(((range="endofrange", startref="ixch02asciidoc22"))) 일부가 자리에 없거나 논의의 긴급성이 낮다면 이메일이 더 나을 수 있습니다.(((range="endofrange", startref="ixch02asciidoc21")))(((range="endofrange", startref="ixch02asciidoc20")))(((range="endofrange", startref="ixch02asciidoc19"))) 앞서 <<communication_patterns_of_successful_cul>>에서 살펴본 동기식 대 비동기식 커뮤니케이션의 비용을 기억하세요.(((range="endofrange", startref="ixch02asciidoc7")))(((range="endofrange", startref="ixch02asciidoc6")))

[[using_an_issue_tracker]]
=== Using an Issue Tracker

((("bug trackers")))((("communication","issue trackers")))((("issue trackers")))If you're going to use an issue/bug tracker (and you should), it's important that you
have some sort of process in place for processing and triaging bugs to
encourage people to file and fix important bugs in a timely manner. If
your bug tracker is neglected and not prioritized, people will stop
filing bugs and begin shouting complaints into the void; and when your
team eventually digs
into the bug tracker, more than likely they will be fixing unimportant
bugs and ignoring important ones.

이슈/버그 트래커를 쓸 것이라면(그리고 써야 합니다), 버그를 처리하고 분류하는 프로세스를 갖춰 사람들이 중요한 버그를 제때 등록하고 고치도록 장려해야 합니다. 버그 트래커가 방치되고 우선순위가 없다면, 사람들은 버그 등록을 멈추고 허공을 향해 불만을 외치기 시작합니다. 그러다 팀이 결국 트래커를 파헤치면, 정작 중요한 버그는 무시하고 중요하지 않은 버그만 고치게 될 가능성이 큽니다.

Keep in mind that a bug tracker is really just a slightly specialized
"Internet forum" or "bulletin board." As such, it shares most
properties in common with email lists and the same best practices
apply. Hallway conversations about bugs
should be recorded as updates in the bug tracker, making thoughts and
decisions "official" for all to see. Keep the tone civil and don't
tolerate trollish behaviors.

버그 트래커는 본질적으로 약간 특화된 “인터넷 포럼” 혹은 “게시판”일 뿐임을 기억하세요. 따라서 메일링 리스트와 공통점이 많고, 같은 모범 사례가 적용됩니다. 복도에서 나눈 버그 대화도 트래커 업데이트로 기록해, 생각과 결정을 모두가 볼 수 있는 “공식 기록”으로 남기세요. 어조는 정중히 유지하고, 트롤링은 용납하지 마세요.

We've also seen numerous occasions where a project manager is assigned
the task of checking in on all open issues in the issue tracker. This
can often not only create a great deal of churn, but also lead team members
to start lengthy conversations in the issue tracker. If conversations
get overly long or fragmented, take the discussion temporarily to the
main email list—an email client is a much better tool for complex
threads.

프로젝트 매니저가 트래커의 모든 오픈 이슈를 순회 점검하는 일이 맡겨지는 경우도 자주 봤습니다. 이는 큰 소용돌이를 만들 뿐 아니라, 팀원들이 트래커에서 장황한 대화를 시작하게 만들기도 합니다. 대화가 지나치게 길어지거나 뿔뿔이 흩어지면, 잠시 메인 메일링 리스트로 옮기세요—복잡한 스레드에는 이메일 클라이언트가 훨씬 더 좋은 도구입니다.

[[communication_as_part_of_engineering]]
=== Communication as Part of Engineering

((("communication","as part of engineering", id="ixch02asciidoc25", range="startofrange")))((("engineering","communication as part of", id="ixch02asciidoc26", range="startofrange")))Hundreds and hundreds of books have been written about the
software development process. While we're not
going to dig into them all here, there are a few communication-related
highlights that deserve mention, regardless of the development methodology you use. Even if
you don't write software, there are a few lessons to be learned
here—especially lessons about what __not__ to do.

소프트웨어 개발 프로세스에 관한 책은 수백, 수천 권에 이릅니다. 여기서 모두 파헤칠 수는 없지만, 어떤 개발 방법론을 쓰든 꼭 짚고 넘어가야 할 커뮤니케이션 관련 요점이 몇 가지 있습니다. 설령 소프트웨어를 쓰지 않더라도 배울 점이 있습니다—특히 __하지 말아야 할 일__에 관한 교훈이요.

[[code_comments]]
==== Code Comments

((("code comments")))((("communication","code comments")))((("engineering","code comments")))Code commenting style is very subjective. Verbose
comments can often provide clues regarding the intent and reasoning of
the original programmer and can be very useful, but at the cost of
ongoing maintenance: out-of-date or incorrect comments drastically
hinder understanding of a code base. Similarly, terse or nonexistent
comments can cause future maintainers or API consumers to waste time
sleuthing. Comments are often used to point out missing structure and
bad naming, and then go on to reexplain what the code already says. Comments should be focused on __why__
the code is doing what it's doing, not __what__ the code is
doing.

코드 주석 스타일은 매우 주관적입니다. 장황한 주석은 원 작성자의 의도와 이유에 대한 실마리를 제공해 유용할 때가 많지만, 그만큼 유지보수 비용이 듭니다. 낡거나 틀린 주석은 코드베이스 이해를 크게 해칩니다. 반대로 너무 짧거나 아예 없는 주석은, 미래의 유지보수자나 API 소비자가 추리하느라 시간을 낭비하게 만듭니다. 주석은 흔히 빠진 구조와 나쁜 네이밍을 지적한 뒤, 코드가 이미 말하는 바를 다시 설명하는 데 쓰입니다. 주석은 코드가 __무엇__을 하는지가 아니라, 왜 __그렇게__ 하는지에 집중해야 합니다.

Comments are most useful at the function or method level, especially
as a means of documenting an API, and without going into exhaustive
details, comments can be summed up with the popular Greek maxim,
"μηδέν άγαν," or "nothing in excess."
Beyond that, take the time to come up with a commenting style for your team and have everyone stick to it—we think being
consistent is more important than the ((("Art of Readable Code, The (Boswell)")))((("Boswell, Dustin")))((("Foucher, Trevor")))actual
choice.footnote:[See the excellent section on
comments in pass:[<a class="orm:hideurl" href="http://shop.oreilly.com/product/9780596802301.do"><em>The Art of Readable Code</em></a>] by Dustin Boswell and Trevor Foucher
(O'Reilly).] Your style guide should also explain the reason the guide
exists and what it intends to prescribe—for example, here's the
introduction to the ((("Google C$$++$$ Style Guide")))Google C++ Style
Guide:footnote:[Find this and several other style
guides at link:$$http://code.google.com/p/google-styleguide/$$[].]

주석은 함수나 메서드 수준에서 가장 유용합니다. 특히 API를 문서화하는 수단으로서요. 장황함을 피하라는 뜻에서, “μηδέν άγαν(과유불급)”이라는 유명한 그리스 격언으로 요약할 수 있습니다. 그다음으로 중요한 것은 팀의 주석 스타일을 정해 모두가 따르도록 하는 것입니다—우리 생각에 일관성이 ((("Art of Readable Code, The (Boswell)")))((("Boswell, Dustin")))((("Foucher, Trevor")))실제 선택지보다 더 중요합니다.footnote:[더스틴 보스웰과 트레버 파우처의 The Art of Readable Code(O'Reilly) 주석 챕터를 참고하세요: pass:[<a class="orm:hideurl" href="http://shop.oreilly.com/product/9780596802301.do"><em>The Art of Readable Code</em></a>].] 스타일 가이드는 왜 존재하는지와 무엇을 규정하려는지 설명해야 합니다. 예컨대 ((("Google C$$++$$ Style Guide")))Google C++ 스타일 가이드는 이렇게 시작합니다.footnote:[이 가이드와 다른 여러 스타일 가이드는 link:$$http://code.google.com/p/google-styleguide/$$[]에서 찾을 수 있습니다.]

[quote]
____
C$$++$$ is the main development language used by many of Google's
open-source projects. As every C$$++$$ programmer knows, the language
has many powerful features, but this power brings with it complexity,
which in turn can make code more bug-prone and harder to read and
maintain.

The goal of this guide is to manage this complexity by describing in
detail the dos and don'ts of writing C$$++$$ code. These rules exist
to keep the code base manageable while still allowing coders to use
C$$++$$ language features productively.

Style, also known as readability, is what we call the conventions
that govern our C$$++$$ code. The term Style is a bit of a misnomer,
since these conventions cover far more than just source file
formatting.

One way in which we keep the code base manageable is by enforcing
consistency. It is very important that any programmer be able to look
at another's code and quickly understand it. Maintaining a uniform
style and following conventions means that we can more easily use
"pattern-matching" to infer what various symbols are and what
invariants are true about them. Creating common, required idioms and
patterns makes code much easier to understand. In some cases there
might be good arguments for changing certain style rules, but we
pass:[<span class="keep-together">nonetheless</span>] keep things as they are in order to preserve
consistency.

Another issue this guide addresses is that of pass:[<span class="keep-together">C++</span>] feature
bloat. C$$++$$ is a huge language with many advanced features. In some
cases we constrain, or even ban, use of certain features. We do this
to keep code simple and to avoid the various common errors and
problems that these features can cause. This guide lists these
features and explains why their use is pass:[<span class="keep-together">restricted</span>].

Open-source projects developed by Google conform to the requirements
in this guide.

Note that this guide is not a C$$++$$ tutorial: we assume that the
reader is familiar with the language.
____

Note that the guide doesn't make claims about enforcing the best or fastest way
to write C$$++$$, but merely the importance of having consistency
across the code base.

이 가이드는 C$$++$$를 쓰는 가장 좋거나 가장 빠른 방법을 강제하려는 것이 아니라, 코드베이스 전반의 일관성 유지가 얼마나 중요한지를 강조할 뿐임을 유념하세요.


[[putting_your_name_in_source_code_files_a]]
==== Putting Your Name on Your Work

((("attribution", id="ixch02asciidoc27", range="startofrange")))((("authorship, of code", id="ixch02asciidoc28", range="startofrange")))((("communication","putting your name on work", id="ixch02asciidoc29", range="startofrange")))((("name, putting on code", id="ixch02asciidoc30", range="startofrange")))Everyone wants to get credit for work they do, from the artist who
signs her painting to the author who puts her name on the spine of her
book or the top of her blog. It's human nature to crave recognition in
one way or another, but littering source files with your name is, in
our opinion, more trouble than it's worth. We've all seen these
attributions at the top of source files, nestled snugly against the
copyright declarations:

누구나 자신이 한 일에 대한 공로를 인정받고 싶어 합니다. 그림에 사인을 남기는 화가에서부터, 책 등이나 블로그 상단에 이름을 올리는 저자까지 말이죠. 어떤 식으로든 인정받고 싶은 마음은 인간의 본성입니다. 하지만 소스 파일마다 이름을 도배하는 일은, 우리 생각에 얻는 것보다 잃는 것이 큽니다. 저작권 표시 옆에 바싹 붙은 이름 줄들을 모두가 본 적 있을 겁니다.


[listing]
....
# ----------------------------------
# Created: October 1998 by Brian W. Fitzpatrick <fitz@red-bean.com>
# ----------------------------------
....

The tradition of putting your name at the top of your source code is
an old one (heck, both of us have done it in the past), and may have
been appropriate in an age where programs were written by individuals
and not teams. Today, however, many people may touch a particular
piece of code, and the issue of name attribution in a file is the
cause of much discussion, wasted time, and hurt feelings. As a result,
we advocate strongly against names as a sign of ownership in source
code files (at best, include a name to designate a first choice to
review any changes you might make to the file, but be careful that you
don't imply pass:[<span class="keep-together">ownership</span>]).

소스 코드 상단에 이름을 넣는 전통은 오래되었습니다(우리도 과거에 그랬습니다). 개인이 프로그램을 쓰던 시절에는 타당했을지도 모릅니다. 하지만 오늘날에는 같은 코드에 많은 사람이 손을 댑니다. 파일의 이름 표기는 끝없는 논쟁과 시간 낭비, 그리고 상처받은 감정의 온상이 됩니다. 따라서 우리는 소스 파일에 소유권의 표시로 이름을 넣는 것을 강하게 반대합니다(굳이 넣는다면, 변경 시 우선 리뷰어 지정을 위한 정도로만, 결코 소유권을 암시하지 않도록 조심하세요).

[[image_no_caption-id014]]
image::images/dbtm_02in06.png[]

Let's imagine, for example, that you create a new file in your
team's pass:[<span class="keep-together">project—</span>]you
write a few hundred lines of code, smack your name and the appropriate
copyright header at the top of the file and send it off for code
review, and later, commit it to the repository. No problems, no drama,
no disagreements so far. Let's say that your teammate Adrian comes
along and makes some changes to the file: at what point does he get to
put his name at the top of the file? Does he have to fix a bug? Five
bugs? Does he have to write a function? Two functions? How many lines
of code does he have to write? What if he writes a function, slaps his
name on the file, and then someone else comes along and rewrites "his"
function? Does this person now get to put her name on the file? Does
she get to take Adrian's name off? Unlike other collaborative pieces
of creative work—plays, novels, films—software keeps changing even after it's
"done." So, while listing contributor credits at the end of a movie is
a safe and static thing, attempting to add and remove names from a
source file is a never-ending exercise in
insanity.

예를 들어 봅시다. 여러분이 팀의 pass:[<span class="keep-together">프로젝트—</span>]새 파일을 만들고 수백 줄의 코드를 씁니다. 파일 상단에 이름과 적절한 저작권 표시를 넣어 코드 리뷰에 보내고, 이후 저장소에 커밋합니다. 지금까지는 문제도, 드라마도, 이견도 없습니다. 그런데 동료 Adrian이 와서 파일을 고칩니다. 언제 그가 파일 상단에 자신의 이름을 올릴 수 있을까요? 버그를 한 개 고치면? 다섯 개? 함수를 하나 쓰면? 두 개는? 몇 줄을 써야 할까요? 그가 함수를 하나 쓰고 이름을 올렸는데, 다른 누군가가 와서 그 “그의” 함수를 다시 쓴다면? 그 사람도 이름을 올려야 할까요? Adrian의 이름은 지워야 할까요? 연극, 소설, 영화 같은 다른 협업 창작물과 달리, 소프트웨어는 “완성” 이후에도 계속 변합니다. 영화 끝에 올라가는 참여자 목록은 안전하고 정적인 일이지만, 소스 파일의 이름을 더했다 뺐다 하는 일은 끝없는 광기로 흐르기 쉽습니다.


Certainly you can answer all these questions and extensively document
every possible edge case, but maintaining this, tracking it, and
keeping an eye out for violations is an incredible waste of time—time
that could be spent actually writing code. It's for this very reason
that we advocate tracking credit at the __project level__, not in the
code itself. Most projects that we've
seen have an &quot;Authors&quot; or &quot;Contributors&quot; file that lists everyone who
has done work. If you need more detail, your version control system
can tell you.(((range="endofrange", startref="ixch02asciidoc30")))(((range="endofrange", startref="ixch02asciidoc29")))(((range="endofrange", startref="ixch02asciidoc28")))(((range="endofrange", startref="ixch02asciidoc27"))) Of course, if you __don't__ use version control, all
those moments will be lost in time, like tears in
rain.footnote:[Roy, __Blade Runner__, 1982.]

물론 위 질문들에 답을 정하고 가능한 모든 엣지 케이스를 상세히 문서화할 수는 있습니다. 하지만 이를 유지·추적하고 위반을 감시하는 일은—원래 코드 작성에 썼어야 할—엄청난 시간 낭비입니다. 바로 이 때문에, 우리는 공로를 코드가 아닌 __프로젝트 수준__에서 추적할 것을 권합니다. 우리가 본 대부분의 프로젝트에는 일을 한 모든 사람을 나열한 “Authors”나 “Contributors” 파일이 있습니다. 더 자세한 내용이 필요하면, 버전 관리 시스템이 알려줄 것입니다.(((range="endofrange", startref="ixch02asciidoc30")))(((range="endofrange", startref="ixch02asciidoc29")))(((range="endofrange", startref="ixch02asciidoc28")))(((range="endofrange", startref="ixch02asciidoc27"))) 물론 버전 관리를 __하지 않는다면__, 그 모든 순간은 빗속의 눈물처럼 시간 속에 사라질 것입니다.footnote:[영화 블레이드 러너(1982) Roy의 대사]

[[require_code_reviews_for_every_commit]]
==== Require Code Reviews for Every Commit

((("code reviews")))((("commits, code reviews for")))((("engineering","code reviews")))If you're going to have coding standards, you need to have a means of
monitoring code going into your product. Whether you review the code
before committing it or after committing it, you should make sure
every line of code that goes into your repository gets a second pair
of eyes on it to check for style, quality, and, of course, careless
mistakes. Keep code changes small and pass:[<span class="keep-together">reviewable—</span>]changesets that are
thousands of lines long are unreviewable for anything but formatting
nits. This not only results in a higher-quality code base, but also
goes a long way toward instilling a strong sense of group pride in the
quality of your code. For more information, see
the section on feedback loops in <<hiding_is_considered_harmful>>.

코딩 표준을 둘 것이라면, 제품으로 들어오는 코드를 감시할 수단이 필요합니다. 커밋 전이든 후든, 저장소로 들어오는 __모든__ 코드 한 줄 한 줄이 두 번째 눈의 검토를 거쳐, 스타일, 품질, 그리고 물론 부주의한 실수를 확인하도록 하세요. 변경은 작고 pass:[<span class="keep-together">리뷰 가능</span>]하게 유지하세요—수천 줄짜리 체인지셋은 포맷 잔소리 말고는 리뷰할 수 없습니다. 이는 더 높은 품질의 코드베이스를 만들 뿐만 아니라, 코드 품질에 대한 강한 집단적 자부심을 심는 데도 크게 기여합니다. 더 자세한 내용은 <<hiding_is_considered_harmful>>의 피드백 루프 섹션을 참고하세요.

[[have_real_test_and_release_processes]]
==== Have Real Test and Release Processes

((("communication","and test/release processes")))((("engineering","test/release processes")))((("release processes")))((("test processes")))Whether you're a full-on test-driven development shop or you just have some simple
regression tests for your product, the more automated tests you have
for your product, the more confident you can be when you're tearing
through fixing bugs or adding new features. Once your team determines
the role that testing will play, it should be
part of the coding and review process. Just as importantly, your
release process should be lightweight enough that you can do frequent
releases (e.g., weekly), but thorough enough that you catch brokenness
before it hits your users.(((range="endofrange", startref="ixch02asciidoc26")))(((range="endofrange", startref="ixch02asciidoc25")))

풀 TDD를 하는 팀이든, 간단한 회귀 테스트만 있는 팀이든, 자동화된 테스트가 많을수록 버그를 고치고 기능을 추가할 때 더 큰 확신을 갖게 됩니다. 테스트의 역할을 정했다면, 그것이 코딩과 리뷰 과정의 일부가 되어야 합니다. 못지않게 중요한 점은, 릴리스 프로세스가 충분히 가벼워서(예: 주간) 자주 릴리스할 수 있어야 하면서도, 사용자에게 문제를 전파하기 전에 깨짐을 잡아낼 만큼 충분히 철저해야 한다는 것입니다.(((range="endofrange", startref="ixch02asciidoc26")))(((range="endofrange", startref="ixch02asciidoc25")))

[[it_really_is_about_the_code_after_all]]
=== It Really Is About Your Product, After All

((("product","and team culture")))((("team culture","and product")))Although these habits of culture and communication may seem to represent a certain amount of bias, as
they reflect the manner in which we prefer to work, it's not as
subjective as you might think. We've found that building a strong,
productive team culture and taking some time
to pay attention to communication in the team creates a team that will
spend more time writing and shipping product and less time arguing about
what product to ship.

문화와 커뮤니케이션의 이런 습관은, 우리가 선호하는 일하는 방식을 반영하므로 어느 정도의 편향처럼 보일 수 있습니다. 그러나 여러분이 생각하는 만큼 주관적이지만은 않습니다. 우리는 강하고 생산적인 팀 문화를 만들고, 팀 내 커뮤니케이션에 시간을 들이는 일이, 제품을 쓰고 출시하는 데 더 많은 시간을 쓰고, 무엇을 출시할지 언쟁하는 데는 더 적은 시간을 쓰는 팀을 만든다는 사실을 확인했습니다.

((("self-selecting cultures")))Strong teams don't arise spontaneously; they're carefully seeded and
cultivated by team leads and
founders who understand the high cost of trying to write software with
a dysfunctional team. Putting this work in from the outset helps to
create a self-selecting culture that builds a team that will spend
much more time designing and creating a product than defining and defending
their culture. A big side benefit of this effort—communication and process—is that it
drastically reduces the barrier to entry for newcomers to your
team. Without these elements in place, newcomers will either waste a
lot of time struggling to learn how your team works or give up and try
to make your team work like their last team did (for good or for bad).

강한 팀은 저절로 생기지 않습니다. 기능 장애 팀으로 소프트웨어를 쓰는 데 드는 높은 비용을 이해하는 리드와 창업자들이 정성껏 씨를 뿌리고 가꾸어야 합니다. 처음부터 이런 노력을 들이면, 문화를 규정하고 방어하는 데보다 제품을 설계하고 만드는 데 훨씬 더 많은 시간을 쓰는 자기 선택적 문화를 만들 수 있습니다. 이 노력(커뮤니케이션과 프로세스)의 큰 부수 효과는, 신입이 팀에 합류하는 장벽을 크게 낮춘다는 것입니다. 이런 요소가 없으면, 신입은 팀이 어떻게 일하는지 배우느라 시간을 낭비하거나, 포기하고 지난 팀처럼 일하게 만들려고 들 것입니다(좋든 나쁘든).

((("communication")))While getting the right people on your team and the right values
instilled in your team is important, the overwhelming majority of
effort that goes into a culture turns out to be communication. Mission
statements, meetings, mailing lists, online chat, code comments,
documentation, and even decision-making processes all make up the many
different ways your team communicates, both with itself and with
others. It's often a surprise to people that it takes so much
communication—including emotional time and effort—to build a strong
team for the sole purpose of creating a product, but it's true. Your
product is ultimately about communications with __people__, not just
with a machine.

적절한 사람을 팀에 모으고 올바른 가치를 심는 일은 중요하지만, 문화에 들어가는 노력의 압도적 다수는 커뮤니케이션입니다. 미션 문서, 회의, 메일링 리스트, 온라인 채팅, 코드 주석, 문서, 심지어 의사결정 과정까지—이 모든 것이 팀이 내부와 외부에 소통하는 다양한 방식입니다. 오직 제품을 만들기 위해 강한 팀을 세우는 데 이렇게 많은 커뮤니케이션—감정적 시간과 노력까지 포함해서—이 필요하다는 사실은 종종 사람들을 놀라게 하지만, 사실입니다. 제품은 결국 __사람__과의 커뮤니케이션이지, 기계와만의 커뮤니케이션이 아니기 때문입니다.

No matter what your team's culture is, and regardless of how well your
team communicates, every effective team that we've ever seen has a
leader. In the next chapter, we'll look into what makes the most
effective team leader, why her role is probably not what you think,
and why it's important for every team member to understand the basics
of leading a team.(((range="endofrange", startref="ixch02asciidoc1")))(((range="endofrange", startref="ixch02asciidoc0")))

팀의 문화가 무엇이든, 커뮤니케이션이 얼마나 잘되든 간에, 우리가 본 모든 효과적인 팀에는 리더가 있었습니다. 다음 장에서는 가장 효과적인 팀 리더를 만드는 요소가 무엇인지, 그 역할이 여러분이 생각하는 것과 왜 다를 수 있는지, 그리고 팀의 모든 구성원이 리더십의 기본을 이해하는 것이 왜 중요한지를 살펴보겠습니다.(((range="endofrange", startref="ixch02asciidoc1")))(((range="endofrange", startref="ixch02asciidoc0")))

