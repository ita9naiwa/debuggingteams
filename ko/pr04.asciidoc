[[introduction]]
[preface]
== Introduction

[quote, Bill Coughran, former SVP of Engineering at Google]
__________________
공학은 쉽다. 사람이 어렵다.
__________________


((("bad companies", see="average companies")))((("companies", "average/typical", see="average companies")))((("corporations, ideal", see="ideal companies")))((("employees", "difficult/negative", see="poisonous people")))((("manipulation, organizational", see="organizational manipulation")))((("people", "poisonous", see="poisonous people")))((("product", "design", see="design)")))((("properly functioning companies", see="ideal companies")))((("software", "design of", see="design")))((("typical companies", see="average companies")))인생은 ((("Coughran, Bill")))예상치 못한 반전의 연속이고, 우리 둘도 언젠가 팀워크와 협업에 관한 책을 쓰게 되리라곤 상상하지 못했습니다.

많은 현대의 "메이커"들처럼, 우리는 대학 졸업 후에 컴퓨터를 가지고 노는 취미와 열정이 생계를 꾸릴 훌륭한 방법이 될 수 있음을 발견했습니다.
우리 세대의 대부분 해커들처럼, 1990년대 중반에는 남는 부품으로 PC를 조립하고, 수많은 디스켓으로 리눅스 프리릴리스를 설치하고,
유닉스 머신을 운영하는 법을 배웠습니다.
닷컴 버블이 막 시작될 무렵 우리는 프로그래머가 되었고,
버블이 꺼진 뒤에는 애플 같은 살아남은 실리콘밸리 회사들에서 일했습니다.
이후 우리는 스타트업에 채용되어, 서브버전(Subversion)이라는 오픈 소스 버전 관리 시스템의 설계와
구현을 전업으로 하게 됐습니다.

그런데 2000년에서 2005년 사이에 예상치 못한 변화가 생겼습니다.
서브버전을 만들던 동안 우리의 업무 책임이 서서히 달라진 것입니다.
진공 속에서 하루 종일 코드만 쓰는 것이 아니라, 오픈 소스 프로젝트를 이끌고 있었습니다.
이는 하루 종일 채팅방에 상주하며 열댓 명의 자원봉사 프로그래머들이 무엇을 하는지 지켜보는 일을 의미했습니다.
새로운 기능을 거의 전적으로 메일링 리스트를 통해 조율하는 일이기도 했습니다.
그러는 동안 우리는 프로젝트의 성공 열쇠가 훌륭한 코드를 쓰는 데에만 있지 않다는 것을 발견했습니다.
사람들 즉 목표를 향해 협업하는 __방식__이 그만큼 중요했습니다.

2005년에 우리는 구글 시카고 엔지니어링 오피스를 시작했고, 프로그래머로서의 커리어를 이어갔습니다.
이때 이미 우리는 오픈 소스 세계에 깊이 관여하고 있었습니다.
서브버전뿐 아니라 아파치((("Apache Software Foundation (ASF)"))) 소프트웨어 재단(ASF)에서도요.
서브버전을 구글의 빅테이블((("BigTable")))((("Google Code")))((("SourceForge"))) 인프라로 포팅했고, 구글 코드라는 이름으로(소스포지와 비슷한) 오픈 소스 프로젝트 호스팅 서비스를 시작했습니다.
우리는 OSCON, 아파치콘, 파이콘, 그리고 결국 구글 I/O 같은 개발자 중심 컨퍼런스에 참석하다가 연사로도 나섰습니다.
기업과 오픈 소스 프로젝트 양쪽에서 일하다 보니, 실제 소프트웨어 엔지니어링 팀들이 어떻게 일하는지에 관한 지혜와 일화들을
'의도치 않게' 한 보따리 얻게 됐다는 것을 알게 됐습니다.
기능 고장 난 개발 프로세스("Subversion Worst Practices")에 대한 유머러스한 연설로 시작한 것이, 점차 팀을 독성 인물로부터 보호하는 법
("How Open Source Projects Survive Poisonous People")에 대한 이야기로 변해 갔습니다.
발표장에는 점점 더 큰 청중이 모였고, 말 그대로 개발자들을 위한 "집단 치료" 같은 자리가 되었습니다.

창의적 협업의 사회적 도전에 대해 같은 주제의 강연을 수차례 하고 나자, 오라일리 미디어의 편집자가 그 강연을 책으로 엮어 보자고 권했습니다. 나머지는 역사입니다.

[[image_no_caption-id000]]
image::images/dbtm_00in01.png[]

[[who_is_this_book_for]]
=== 누구를 위한 책인가?

이 책은 원래 커리어를 발전시키고 훌륭한 소프트웨어를 출시하려는 소프트웨어 엔지니어들을 위해 쓰였습니다.
그런데 2판으로 개정하면서, 이 책의 주제들이 훨씬 더 넓은 독자층에 적용된다는 점이 분명해졌습니다.
다른 사람들과 함께 __어떤__ 종류의 창의적 일을 하든, 이 책의 교훈은 당신에게 적용됩니다.
당신은 동네 모임, 교회 그룹, 친목 단체, 위원회, 혹은 건축가 집단의 일원일지도 모릅니다.
우리는 독자인 당신에 대해 두 가지를 가정합니다.

* 당신은 다른 창의적인 사람들과 함께, 아마도 기업이나 다른 구조화된 환경에서, 팀으로 일합니다.

* 당신은 무언가를 만드는 일을 즐기며 그 일이 보람 있고 재미있어야 한다고 믿습니다.
단지 생계를 위해 제품을 찍어내고 있다면, 아마 자기실현이나 커리어 pass:[<span class="keep-together">충족</span>]에는 관심이 없을 겁니다.

우리의 경험은 소프트웨어 엔지니어링에서 왔기에, 예상대로 이 책의 대부분 예시는 그 영역에 속합니다.
하지만 우리가 설명하는 거의 모든 프로세스와 전략은 어떤 창의적 팀에도 직접 적용되거나(혹은 직접적인 유사물이) 존재합니다.

엔지니어들이 다른 사람들과 "잘 어울려" 일하는 법을 논의하는 과정에서,
표면적으로는 프로그래머의 직무 범위를 벗어난 듯 보이는 주제들을 다루게 됩니다.
어떤 곳에서는 팀을 효과적으로 이끄는 법, 조직을 항해하는 법, 소프트웨어 사용자와 건강한 관계를 맺는 법을 논합니다.
겉으로 보기엔 이런 장들이 "피플 매니저"나 "프로덕트 매니저"를 위한 내용처럼 보일 수 있습니다.
하지만 커리어의 어느 순간엔가 당신도 뜻밖에 그런 역할을 맡게 될 것입니다.
불신을 잠시 내려두고 계속 읽어 주세요! 이 책의 모든 내용은 결국 무언가를 만드는 모든 사람에게 관련이 있습니다.

[[warning_this_is_not_a_technical_manual]]
==== 주의: 이 책은 기술 매뉴얼이 아닙니다.

시작하기 전에, 당신의 기대치를 설정해야 합니다. 열정적인 프로그래머는 도메인 구체적인 문제를 완벽한 수학적 표현으로 제시하는 책을 읽기 좋아하죠. 각 문제는 일반적으로 정해진 절차적 솔루션과 함께 나옵니다.

이 책은 그런 책이 아닙니다.

[role="pagebreak-before"]
우리 책은 창의적 제품 개발의 __인간적인__ 측면을 탐구합니다.
그리고 인간은 복잡한 존재입니다.
우리가 강연에서 자주 말하듯, "사람이란 본질적으로 간헐적 버그의 거대한 더미"입니다.
우리가 다루는 문제와 해법은 어수선하며, 깔끔한 논리 상자에 딱 들어맞지 않습니다.
이 책은 일련의 에세이처럼 읽힙니다.
실제로도 그렇습니다.
각 장마다 관련된 문제들을(종종 일화로) 묶어 논의하고, 이어서 전체 주제에 걸맞은 해법 묶음을 이야기합니다.
모든 것을 온전히 흡수하려면, 몇 페이지에 걸친 집중 시간을 늘리고, 우뇌를 동원해 연결고리를 만들거나,
아예 하룻밤 자고 나서 다시 읽을 필요가 있을지도 모릅니다!

또 몇 가지 더 미리 말씀드릴 것이 있습니다.
우리가 강연에서 농담처럼 말하듯, "이 의견들은 전적으로 우리의 것이며 우리의 경험에 근거합니다.
동의하지 않는다면, 당신도 당신만의 강연을 하시면 됩니다."
구두 발표에서 그랬듯, 이 책의 내용에서 촉발되는 모든 논의를 환영합니다.
피드백, 교정, 새로운 의견, 이견 모두 즐겁게 이야기하고 싶습니다. link:$$http://www.debuggingteams.com/$$[]에서 우리를 찾을 수 있습니다.
이 책의 모든 내용은 우리가 불 속에서 겪은 시행착오와 그로부터 얻은 교훈에서 나왔습니다.

또한 사례에 등장하는 모든 이름은 당사자들을 보호하기 위해 바꾸어졌다는 점도 알려 드립니다.

[[the_contents_of_this_book_are_not_taught]]
==== 이 책의 내용은 학교에서 가르치지 않습니다.

우리가 아는 대부분의 소프트웨어 엔지니어는 컴퓨터 과학과 소프트웨어 엔지니어링을 배우는 데 4년에서 10년까지 시간을 보냈습니다.
그런데 정작 팀이나 회사에서 어떻게 소통하고 협업하는지 실제로 가르치는 커리큘럼footnote:[우리는 톰 드마르코의 __PeopleWare__ 를 읽었고 훌륭한 책이라고 생각합니다.
다만 이 책은 개인 기여자가 사람들과 더 효율적으로 일하는 법을 배우는 책이라기보다, 관리자가 팀을 더 성공적으로 만드는 법을 배우는 책에 가깝습니다.]은 거의 없습니다.
물론 대부분 학생은 학력 과정의 어느 시점엔가 팀 프로젝트를 수행해야 합니다.
하지만 누군가에게 다른 사람과 성공적으로 일하는 법을 __가르치는 것__과, 그를 강제 협업 상황에 __던져 넣는 것__ 사이에는 큰 차이가 있습니다.
대부분 학생은 그 경험에 염증을 느끼게 됩니다.


[[image_no_caption-id001]]
image::images/dbtm_00in02.png[]

[[the_pitch]]
=== 핵심 요약

성공적인 프로그래머가 되는 일은 최신 언어를 배우거나 가장 빠른 코드를 쓰는 일에만 있지 않습니다.
프로그래머는 거의 항상 팀으로 일하며, 개인의 생산성과 행복은 많은 사람들이 인정하고 싶어 하는 것보다 더 직접적으로 팀의 영향을 받습니다.

이 책의 기본 아이디어는 단순합니다. 소프트웨어 작성은 팀 스포츠이며, 결과에 영향을 미치는 데 있어 인간적 요소는 기술적 요소만큼이나 중요합니다. 수십 년을 프로그래밍의 기술적 측면을 배우는 데 보냈더라도, 대부분 사람들은 인간적 요소에 진지하게 집중해 본 적이 없습니다. 협업을 배우는 일은 성공에 똑같이 중요합니다. 엔지니어링의 "소프트 스킬"에 투자하면, 같은 노력으로 훨씬 더 큰 임팩트를 낼 수 있습니다.

